
example_can_node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006778  08006778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006828  08006828  00008044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006830  08006830  00008044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006830  08006830  00007830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006834  08006834  00007834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  08006838  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000044  0800687c  00008044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  0800687c  00008248  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ff7  00000000  00000000  0000807a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae4  00000000  00000000  0001b071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c38  00000000  00000000  0001eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002914c  00000000  00000000  0001f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182ba  00000000  00000000  000488dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112c52  00000000  00000000  00060b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001737e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004340  00000000  00000000  0017382c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00177b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000044 	.word	0x20000044
 8000210:	00000000 	.word	0x00000000
 8000214:	08006760 	.word	0x08006760

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000048 	.word	0x20000048
 8000230:	08006760 	.word	0x08006760

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2220      	movs	r2, #32
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f000 ffbf 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 32;
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f103 0220 	add.w	r2, r3, #32
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3304      	adds	r3, #4
 80005e0:	2202      	movs	r2, #2
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f000 ffb1 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 2;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1c9a      	adds	r2, r3, #2
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3305      	adds	r3, #5
 80005fa:	2203      	movs	r2, #3
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 ffa4 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 3;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1cda      	adds	r2, r3, #3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	6819      	ldr	r1, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3306      	adds	r3, #6
 8000614:	2203      	movs	r2, #3
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f000 ff97 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 3;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	1cda      	adds	r2, r3, #3
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	6819      	ldr	r1, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	2210      	movs	r2, #16
 8000630:	68f8      	ldr	r0, [r7, #12]
 8000632:	f000 ff8a 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 16;
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f103 0210 	add.w	r2, r3, #16
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	601a      	str	r2, [r3, #0]





}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8000658:	2207      	movs	r2, #7
 800065a:	2100      	movs	r1, #0
 800065c:	6838      	ldr	r0, [r7, #0]
 800065e:	f006 f844 	bl	80066ea <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8000662:	f107 010c 	add.w	r1, r7, #12
 8000666:	2301      	movs	r3, #1
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	6838      	ldr	r0, [r7, #0]
 800066c:	f7ff ffa0 	bl	80005b0 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3307      	adds	r3, #7
 8000674:	08db      	lsrs	r3, r3, #3
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_uavcan_protocol_dynamic_node_id_Allocation_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
static inline bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao);
void _uavcan_protocol_dynamic_node_id_Allocation_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
 800068a:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->node_id);
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2207      	movs	r2, #7
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f000 ff58 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 7;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1dda      	adds	r2, r3, #7
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 1, &msg->first_part_of_unique_id);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	6819      	ldr	r1, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	2201      	movs	r2, #1
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f000 ff4b 	bl	800154a <canardEncodeScalar>

    *bit_ofs += 1;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	601a      	str	r2, [r3, #0]





    if (!tao) {
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	f083 0301 	eor.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00c      	beq.n	80006e4 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x66>


        canardEncodeScalar(buffer, *bit_ofs, 5, &msg->unique_id.len);
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3302      	adds	r3, #2
 80006d2:	2205      	movs	r2, #5
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f000 ff38 	bl	800154a <canardEncodeScalar>
        *bit_ofs += 5;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1d5a      	adds	r2, r3, #5
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t unique_id_len = msg->unique_id.len > 16 ? 16 : msg->unique_id.len;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b10      	cmp	r3, #16
 80006ea:	bf28      	it	cs
 80006ec:	2310      	movcs	r3, #16
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < unique_id_len; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e012      	b.n	800071e <_uavcan_protocol_dynamic_node_id_Allocation_encode+0xa0>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id.data[i]);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	4413      	add	r3, r2
 8000702:	3303      	adds	r3, #3
 8000704:	2208      	movs	r2, #8
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f000 ff1f 	bl	800154a <canardEncodeScalar>

        *bit_ofs += 8;
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f103 0208 	add.w	r2, r3, #8
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < unique_id_len; i++) {
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	429a      	cmp	r2, r3
 8000724:	d3e8      	bcc.n	80006f8 <_uavcan_protocol_dynamic_node_id_Allocation_encode+0x7a>





}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
 decode uavcan_protocol_dynamic_node_id_Allocation, return true on failure, false on success
*/
bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af02      	add	r7, sp, #8
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 7, false, &msg->node_id);
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	6819      	ldr	r1, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	2207      	movs	r2, #7
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f000 fd74 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 7;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	1dda      	adds	r2, r3, #7
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 1, false, &msg->first_part_of_unique_id);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3301      	adds	r3, #1
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	2201      	movs	r2, #1
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 fd65 	bl	8001238 <canardDecodeScalar>

    *bit_ofs += 1;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	601a      	str	r2, [r3, #0]





    if (!tao) {
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	f083 0301 	eor.w	r3, r3, #1
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00f      	beq.n	80007a4 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x74>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->unique_id.len);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	6819      	ldr	r1, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3302      	adds	r3, #2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2205      	movs	r2, #5
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f000 fd50 	bl	8001238 <canardDecodeScalar>
        *bit_ofs += 5;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1d5a      	adds	r2, r3, #5
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	e00a      	b.n	80007ba <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x8a>



    } else {

        msg->unique_id.len = ((transfer->payload_len*8)-*bit_ofs)/8;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	8a9b      	ldrh	r3, [r3, #20]
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	461a      	mov	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	709a      	strb	r2, [r3, #2]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->unique_id.len > 16) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	789b      	ldrb	r3, [r3, #2]
 80007be:	2b10      	cmp	r3, #16
 80007c0:	d901      	bls.n	80007c6 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x96>
        return true; /* invalid value */
 80007c2:	2301      	movs	r3, #1
 80007c4:	e01e      	b.n	8000804 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xd4>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->unique_id.len; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e014      	b.n	80007f6 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xc6>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->unique_id.data[i]);
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	4413      	add	r3, r2
 80007d6:	3303      	adds	r3, #3
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	2208      	movs	r2, #8
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f000 fd2a 	bl	8001238 <canardDecodeScalar>

        *bit_ofs += 8;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f103 0208 	add.w	r2, r3, #8
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->unique_id.len; i++) {
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	3301      	adds	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	461a      	mov	r2, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d3e4      	bcc.n	80007cc <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x9c>





    return false; /* success */
 8000802:	2300      	movs	r3, #0

}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <uavcan_protocol_dynamic_node_id_Allocation_encode>:

uint32_t uavcan_protocol_dynamic_node_id_Allocation_encode(struct uavcan_protocol_dynamic_node_id_Allocation* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE);
 800081a:	2212      	movs	r2, #18
 800081c:	2100      	movs	r1, #0
 800081e:	6838      	ldr	r0, [r7, #0]
 8000820:	f005 ff63 	bl	80066ea <memset>
    _uavcan_protocol_dynamic_node_id_Allocation_encode(buffer, &bit_ofs, msg, 
 8000824:	f107 010c 	add.w	r1, r7, #12
 8000828:	2301      	movs	r3, #1
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	6838      	ldr	r0, [r7, #0]
 800082e:	f7ff ff26 	bl	800067e <_uavcan_protocol_dynamic_node_id_Allocation_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	3307      	adds	r3, #7
 8000836:	08db      	lsrs	r3, r3, #3
}
 8000838:	4618      	mov	r0, r3
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <uavcan_protocol_dynamic_node_id_Allocation_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_dynamic_node_id_Allocation* msg) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &bit_ofs, msg,
 800084e:	f107 0108 	add.w	r1, r7, #8
 8000852:	2301      	movs	r3, #1
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff6a 	bl	8000730 <_uavcan_protocol_dynamic_node_id_Allocation_decode>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8000862:	2301      	movs	r3, #1
 8000864:	e00c      	b.n	8000880 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	3307      	adds	r3, #7
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	8a9b      	ldrh	r3, [r3, #20]
 8000872:	461a      	mov	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4293      	cmp	r3, r2
 8000878:	bf14      	ite	ne
 800087a:	2301      	movne	r3, #1
 800087c:	2300      	moveq	r3, #0
 800087e:	b2db      	uxtb	r3, r3
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <canardGetLocalNodeID>:
         CANARD_ASSERT(false);
     }
 }

 uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
     return ins->node_id;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 }
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <canardBroadcast>:
 #endif
 #if CANARD_ENABLE_CANFD
                         ,bool canfd
 #endif
 )
 {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	@ 0x38
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	e9c7 2300 	strd	r2, r3, [r7]
     // create transfer object
     CanardTxTransfer transfer_object = {
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	2228      	movs	r2, #40	@ 0x28
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f005 ff18 	bl	80066ea <memset>
 80008ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008be:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80008c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80008c6:	843b      	strh	r3, [r7, #32]
 80008c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80008cc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80008d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80008d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80008dc:	863b      	strh	r3, [r7, #48]	@ 0x30
 #if CANARD_ENABLE_CANFD
         .canfd = canfd,
 #endif
     };

     return canardBroadcastObj(ins, &transfer_object);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	4619      	mov	r1, r3
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f000 f805 	bl	80008f4 <canardBroadcastObj>
 80008ea:	4603      	mov	r3, r0
 }
 80008ec:	4618      	mov	r0, r3
 80008ee:	3738      	adds	r7, #56	@ 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <canardBroadcastObj>:

 int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
 {
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
     if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d106      	bne.n	8000914 <canardBroadcastObj+0x20>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	8c1b      	ldrh	r3, [r3, #32]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <canardBroadcastObj+0x20>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800090e:	f06f 0301 	mvn.w	r3, #1
 8000912:	e070      	b.n	80009f6 <canardBroadcastObj+0x102>
     }
     if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	7e1b      	ldrb	r3, [r3, #24]
 8000918:	2b1f      	cmp	r3, #31
 800091a:	d902      	bls.n	8000922 <canardBroadcastObj+0x2e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800091c:	f06f 0301 	mvn.w	r3, #1
 8000920:	e069      	b.n	80009f6 <canardBroadcastObj+0x102>
     }

     uint32_t can_id = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
     uint16_t crc = 0xFFFFU;
 8000926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800092a:	827b      	strh	r3, [r7, #18]

     if (canardGetLocalNodeID(ins) == 0)
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ffab 	bl	8000888 <canardGetLocalNodeID>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d138      	bne.n	80009aa <canardBroadcastObj+0xb6>
     {
         if (transfer_object->payload_len > 7)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	8c1b      	ldrh	r3, [r3, #32]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d902      	bls.n	8000946 <canardBroadcastObj+0x52>
         {
             return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000940:	f06f 0303 	mvn.w	r3, #3
 8000944:	e057      	b.n	80009f6 <canardBroadcastObj+0x102>
         }

         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

         if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	8a1a      	ldrh	r2, [r3, #16]
 800094a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <canardBroadcastObj+0x10c>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	4013      	ands	r3, r2
 8000950:	b29a      	uxth	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	8a1b      	ldrh	r3, [r3, #16]
 8000956:	429a      	cmp	r2, r3
 8000958:	d002      	beq.n	8000960 <canardBroadcastObj+0x6c>
         {
             return -CANARD_ERROR_INVALID_ARGUMENT;
 800095a:	f06f 0301 	mvn.w	r3, #1
 800095e:	e04a      	b.n	80009f6 <canardBroadcastObj+0x102>
         }

         // anonymous transfer, random discriminator
         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	69d9      	ldr	r1, [r3, #28]
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	8c1b      	ldrh	r3, [r3, #32]
 8000968:	461a      	mov	r2, r3
 800096a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800096e:	f001 fd5f 	bl	8002430 <crcAdd>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 800097a:	4013      	ands	r3, r2
 800097c:	823b      	strh	r3, [r7, #16]
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	7e1b      	ldrb	r3, [r3, #24]
 8000982:	061a      	lsls	r2, r3, #24
 8000984:	8a3b      	ldrh	r3, [r7, #16]
 8000986:	025b      	lsls	r3, r3, #9
 8000988:	431a      	orrs	r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	8a19      	ldrh	r1, [r3, #16]
 800098e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <canardBroadcastObj+0x10c>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	400b      	ands	r3, r1
 8000994:	b29b      	uxth	r3, r3
 8000996:	021b      	lsls	r3, r3, #8
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000998:	ea42 0403 	orr.w	r4, r2, r3
                  ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff73 	bl	8000888 <canardGetLocalNodeID>
 80009a2:	4603      	mov	r3, r0
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80009a4:	4323      	orrs	r3, r4
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e012      	b.n	80009d0 <canardBroadcastObj+0xdc>
     }
     else
     {
         can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	7e1b      	ldrb	r3, [r3, #24]
 80009ae:	061a      	lsls	r2, r3, #24
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	8a1b      	ldrh	r3, [r3, #16]
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	ea42 0403 	orr.w	r4, r2, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ff64 	bl	8000888 <canardGetLocalNodeID>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4323      	orrs	r3, r4
 80009c4:	617b      	str	r3, [r7, #20]
         crc = calculateCRC(transfer_object);
 80009c6:	6838      	ldr	r0, [r7, #0]
 80009c8:	f000 f84c 	bl	8000a64 <calculateCRC>
 80009cc:	4603      	mov	r3, r0
 80009ce:	827b      	strh	r3, [r7, #18]
     }

     const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 80009d0:	8a7a      	ldrh	r2, [r7, #18]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	6979      	ldr	r1, [r7, #20]
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 fef2 	bl	80017c0 <enqueueTxFrames>
 80009dc:	4603      	mov	r3, r0
 80009de:	81fb      	strh	r3, [r7, #14]

     if (result > 0) {
 80009e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dd04      	ble.n	80009f2 <canardBroadcastObj+0xfe>
         incrementTransferID(transfer_object->inout_transfer_id);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fe72 	bl	80016d6 <incrementTransferID>
     }

     return result;
 80009f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 80009f6:	4618      	mov	r0, r3
 80009f8:	371c      	adds	r7, #28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	080067a4 	.word	0x080067a4

08000a04 <canardBufferFromIdx>:
   CanardBufferBlock and CanartRxState structures to have the same size
   on 32 bit and 64 bit platforms, which allows for easier testing in
   simulator environments
  */
 CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
 {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
         return NULL;
     }
     return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
 #else
     (void)allocator;
     return (CanardBufferBlock *)idx;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <canardBufferToIdx>:

 CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
 {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
         return CANARD_BUFFER_IDX_NONE;
     }
     return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
 #else
     (void)allocator;
     return (canard_buffer_idx_t)buf;
 8000a26:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <canardRxFromIdx>:

 CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
 {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
         return NULL;
     }
     return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
 #else
     (void)allocator;
     return (CanardRxState *)idx;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <canardRxToIdx>:

 CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
 {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
         return CANARD_BUFFER_IDX_NONE;
     }
     return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
 #else
     (void)allocator;
     return (canard_buffer_idx_t)rx;
 8000a56:	683b      	ldr	r3, [r7, #0]
 #endif
 }
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <calculateCRC>:

 CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
 {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
     uint16_t crc = 0xFFFFU;
 8000a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a70:	81fb      	strh	r3, [r7, #14]
 #if CANARD_ENABLE_CANFD
     if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
         (transfer_object->payload_len > 63 && transfer_object->canfd))
 #else
     if (transfer_object->payload_len > 7)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	8c1b      	ldrh	r3, [r3, #32]
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	d913      	bls.n	8000aa2 <calculateCRC+0x3e>
 #endif
     {
         crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000a80:	89f9      	ldrh	r1, [r7, #14]
 8000a82:	4608      	mov	r0, r1
 8000a84:	f001 fca5 	bl	80023d2 <crcAddSignature>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	81fb      	strh	r3, [r7, #14]
         crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69d9      	ldr	r1, [r3, #28]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	8c1b      	ldrh	r3, [r3, #32]
 8000a94:	461a      	mov	r2, r3
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fcc9 	bl	8002430 <crcAdd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	81fb      	strh	r3, [r7, #14]
                 crc = crcAddByte(crc, empty);
             }
         }
 #endif
     }
     return crc;
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
 }
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <canardPeekTxQueue>:

     return result;
 }

 CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
     if (ins->tx_queue == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <canardPeekTxQueue+0x14>
     {
         return NULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e002      	b.n	8000ac6 <canardPeekTxQueue+0x1a>
     }
     return &ins->tx_queue->frame;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac4:	3304      	adds	r3, #4
 }
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <canardPopTxQueue>:

 void canardPopTxQueue(CanardInstance* ins)
 {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = ins->tx_queue;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ade:	60fb      	str	r3, [r7, #12]
     ins->tx_queue = item->next;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	625a      	str	r2, [r3, #36]	@ 0x24
     freeBlock(&ins->allocator, item);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	330c      	adds	r3, #12
 8000aec:	68f9      	ldr	r1, [r7, #12]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fce4 	bl	80024bc <freeBlock>
 }
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <canardHandleRxFrame>:

 int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
 {
 8000afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b00:	b09f      	sub	sp, #124	@ 0x7c
 8000b02:	af02      	add	r7, sp, #8
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	e9c7 2300 	strd	r2, r3, [r7]
     const CanardTransferType transfer_type = extractTransferType(frame->id);
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 f87f 	bl	8001c14 <extractTransferType>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d007      	beq.n	8000b34 <canardHandleRxFrame+0x38>
                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
                                         DEST_ID_FROM_ID(frame->id);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b2db      	uxtb	r3, r3
     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	e000      	b.n	8000b36 <canardHandleRxFrame+0x3a>
 8000b34:	2300      	movs	r3, #0
 8000b36:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

     // TODO: This function should maintain statistics of transfer errors and such.

     if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da0f      	bge.n	8000b62 <canardHandleRxFrame+0x66>
         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
     if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d109      	bne.n	8000b62 <canardHandleRxFrame+0x66>
         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <canardHandleRxFrame+0x66>
         (frame->data_len < 1))
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	7b1b      	ldrb	r3, [r3, #12]
         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <canardHandleRxFrame+0x6c>
     {
         return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8000b62:	f06f 0309 	mvn.w	r3, #9
 8000b66:	e361      	b.n	800122c <canardHandleRxFrame+0x730>
     }

     if (transfer_type != CanardTransferTypeBroadcast &&
 8000b68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d00b      	beq.n	8000b88 <canardHandleRxFrame+0x8c>
         destination_node_id != canardGetLocalNodeID(ins))
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f7ff fe89 	bl	8000888 <canardGetLocalNodeID>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
     if (transfer_type != CanardTransferTypeBroadcast &&
 8000b7a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d002      	beq.n	8000b88 <canardHandleRxFrame+0x8c>
     {
         return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8000b82:	f06f 030a 	mvn.w	r3, #10
 8000b86:	e351      	b.n	800122c <canardHandleRxFrame+0x730>
     }

     const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	0e1b      	lsrs	r3, r3, #24
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	f003 031f 	and.w	r3, r3, #31
 8000b94:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
     const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ba2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
     const uint16_t data_type_id = extractDataType(frame->id);
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 f812 	bl	8001bd4 <extractDataType>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
     const uint32_t transfer_descriptor =
             MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8000bb6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000bba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000bbe:	041b      	lsls	r3, r3, #16
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000bc6:	049b      	lsls	r3, r3, #18
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000bce:	065b      	lsls	r3, r3, #25
     const uint32_t transfer_descriptor =
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c

     const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	4413      	add	r3, r2
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

     uint64_t data_type_signature = 0;
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
     CanardRxState* rx_state = NULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c

     if (IS_START_OF_TRANSFER(tail_byte))
 8000bf4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000bf8:	09db      	lsrs	r3, r3, #7
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01e      	beq.n	8000c42 <canardHandleRxFrame+0x146>
     {

         if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	685e      	ldr	r6, [r3, #4]
 8000c08:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000c0c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000c10:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000c14:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	47b0      	blx	r6
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00a      	beq.n	8000c3c <canardHandleRxFrame+0x140>
         {
             rx_state = traverseRxStates(ins, transfer_descriptor);
 8000c26:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f001 f817 	bl	8001c5c <traverseRxStates>
 8000c2e:	66f8      	str	r0, [r7, #108]	@ 0x6c

             if(rx_state == NULL)
 8000c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d110      	bne.n	8000c58 <canardHandleRxFrame+0x15c>
             {
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 8000c36:	f06f 0302 	mvn.w	r3, #2
 8000c3a:	e2f7      	b.n	800122c <canardHandleRxFrame+0x730>
             }
         }
         else
         {
             return -CANARD_ERROR_RX_NOT_WANTED;
 8000c3c:	f06f 030b 	mvn.w	r3, #11
 8000c40:	e2f4      	b.n	800122c <canardHandleRxFrame+0x730>
         }
     }
     else
     {
         rx_state = findRxState(ins, transfer_descriptor);
 8000c42:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f001 f838 	bl	8001cba <findRxState>
 8000c4a:	66f8      	str	r0, [r7, #108]	@ 0x6c

         if (rx_state == NULL)
 8000c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <canardHandleRxFrame+0x15c>
         {
             return -CANARD_ERROR_RX_MISSED_START;
 8000c52:	f06f 030c 	mvn.w	r3, #12
 8000c56:	e2e9      	b.n	800122c <canardHandleRxFrame+0x730>
     }

     CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

     // Resolving the state flags:
     const bool not_initialized = rx_state->timestamp_usec == 0;
 8000c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
     const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8000c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c74:	ebb0 0802 	subs.w	r8, r0, r2
 8000c78:	eb61 0903 	sbc.w	r9, r1, r3
 8000c7c:	4ba9      	ldr	r3, [pc, #676]	@ (8000f24 <canardHandleRxFrame+0x428>)
 8000c7e:	4598      	cmp	r8, r3
 8000c80:	f179 0300 	sbcs.w	r3, r9, #0
 8000c84:	bf2c      	ite	cs
 8000c86:	2301      	movcs	r3, #1
 8000c88:	2300      	movcc	r3, #0
 8000c8a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
     const bool same_iface = frame->iface_id == rx_state->iface_id;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	7b5a      	ldrb	r2, [r3, #13]
 8000c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c94:	7e9b      	ldrb	r3, [r3, #26]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	bf0c      	ite	eq
 8000c9a:	2301      	moveq	r3, #1
 8000c9c:	2300      	movne	r3, #0
 8000c9e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
     const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8000ca2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ca6:	09db      	lsrs	r3, r3, #7
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
     const bool not_previous_tid =
         computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8000cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cbc:	7ddb      	ldrb	r3, [r3, #23]
 8000cbe:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f000 fce0 	bl	8001698 <computeTransferIDForwardDistance>
 8000cd8:	4603      	mov	r3, r0
     const bool not_previous_tid =
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	bfcc      	ite	gt
 8000cde:	2301      	movgt	r3, #1
 8000ce0:	2300      	movle	r3, #0
 8000ce2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
     const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8000ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ce8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0503 	sbc.w	r5, r1, r3
 8000cf6:	4b8c      	ldr	r3, [pc, #560]	@ (8000f28 <canardHandleRxFrame+0x42c>)
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f175 0300 	sbcs.w	r3, r5, #0
 8000cfe:	bf2c      	ite	cs
 8000d00:	2301      	movcs	r3, #1
 8000d02:	2300      	movcc	r3, #0
 8000d04:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
     const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 8000d08:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d14:	7ddb      	ldrb	r3, [r3, #23]
 8000d16:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f000 fcba 	bl	8001698 <computeTransferIDForwardDistance>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	bfd4      	ite	le
 8000d2a:	2301      	movle	r3, #1
 8000d2c:	2300      	movgt	r3, #0
 8000d2e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
     const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 8000d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

     const bool need_restart =
             (not_initialized) ||
             (tid_timed_out) ||
             (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000d42:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d11f      	bne.n	8000d8a <canardHandleRxFrame+0x28e>
             (not_initialized) ||
 8000d4a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d11b      	bne.n	8000d8a <canardHandleRxFrame+0x28e>
             (tid_timed_out) ||
 8000d52:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00b      	beq.n	8000d72 <canardHandleRxFrame+0x276>
             (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000d5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <canardHandleRxFrame+0x276>
 8000d62:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <canardHandleRxFrame+0x28e>
 8000d6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10b      	bne.n	8000d8a <canardHandleRxFrame+0x28e>
 8000d72:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d009      	beq.n	8000d8e <canardHandleRxFrame+0x292>
             (iface_switch_allowed && first_frame && non_wrapped_tid);
 8000d7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <canardHandleRxFrame+0x292>
 8000d82:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <canardHandleRxFrame+0x292>
             (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <canardHandleRxFrame+0x294>
 8000d8e:	2300      	movs	r3, #0
     const bool need_restart =
 8000d90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000d94:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

     if (need_restart)
 8000da0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d02f      	beq.n	8000e08 <canardHandleRxFrame+0x30c>
     {
         rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8000da8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000db4:	7dd3      	ldrb	r3, [r2, #23]
 8000db6:	f361 0386 	bfi	r3, r1, #2, #5
 8000dba:	75d3      	strb	r3, [r2, #23]
         rx_state->next_toggle = 0;
 8000dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000dbe:	7dd3      	ldrb	r3, [r2, #23]
 8000dc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000dc4:	75d3      	strb	r3, [r2, #23]
         releaseStatePayload(ins, rx_state);
 8000dc6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000dc8:	68f8      	ldr	r0, [r7, #12]
 8000dca:	f000 ffe0 	bl	8001d8e <releaseStatePayload>
         rx_state->iface_id = frame->iface_id;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	7b5a      	ldrb	r2, [r3, #13]
 8000dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dd4:	769a      	strb	r2, [r3, #26]
         if (!IS_START_OF_TRANSFER(tail_byte))
 8000dd6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000dda:	09db      	lsrs	r3, r3, #7
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d110      	bne.n	8000e08 <canardHandleRxFrame+0x30c>
         {
             rx_state->transfer_id++;
 8000de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000de8:	7ddb      	ldrb	r3, [r3, #23]
 8000dea:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	3301      	adds	r3, #1
 8000df2:	f003 031f 	and.w	r3, r3, #31
 8000df6:	b2d9      	uxtb	r1, r3
 8000df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000dfa:	7dd3      	ldrb	r3, [r2, #23]
 8000dfc:	f361 0386 	bfi	r3, r1, #2, #5
 8000e00:	75d3      	strb	r3, [r2, #23]
             return -CANARD_ERROR_RX_MISSED_START;
 8000e02:	f06f 030c 	mvn.w	r3, #12
 8000e06:	e211      	b.n	800122c <canardHandleRxFrame+0x730>
         }
     }

     if (frame->iface_id != rx_state->iface_id)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	7b5a      	ldrb	r2, [r3, #13]
 8000e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e0e:	7e9b      	ldrb	r3, [r3, #26]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d001      	beq.n	8000e18 <canardHandleRxFrame+0x31c>
     {
         // drop frame if coming from unexpected interface
         return CANARD_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e209      	b.n	800122c <canardHandleRxFrame+0x730>
     }

     if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8000e18:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e1c:	09db      	lsrs	r3, r3, #7
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d041      	beq.n	8000eac <canardHandleRxFrame+0x3b0>
 8000e28:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e2c:	099b      	lsrs	r3, r3, #6
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d039      	beq.n	8000eac <canardHandleRxFrame+0x3b0>
     {
         rx_state->timestamp_usec = timestamp_usec;
 8000e38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
         CanardRxTransfer rx_transfer = {
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	2220      	movs	r2, #32
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f005 fc4d 	bl	80066ea <memset>
 8000e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
             .timestamp_usec = timestamp_usec,
             .payload_head = frame->data,
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	3304      	adds	r3, #4
         CanardRxTransfer rx_transfer = {
 8000e5c:	61bb      	str	r3, [r7, #24]
             .payload_len = (uint8_t)(frame->data_len - 1U),
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	7b1b      	ldrb	r3, [r3, #12]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b2db      	uxtb	r3, r3
         CanardRxTransfer rx_transfer = {
 8000e66:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e68:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000e6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000e72:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
             .data_type_id = data_type_id,
             .transfer_type = (uint8_t)transfer_type,
             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8000e76:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	b2db      	uxtb	r3, r3
         CanardRxTransfer rx_transfer = {
 8000e80:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000e84:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000e8c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 #elif CANARD_ENABLE_TAO_OPTION
             .tao = !ins->tao_disabled
 #endif
         };

         ins->on_reception(ins, &rx_transfer);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f107 0210 	add.w	r2, r7, #16
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	4798      	blx	r3

         prepareForNextTransfer(rx_state);
 8000ea2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000ea4:	f000 fe74 	bl	8001b90 <prepareForNextTransfer>
         return CANARD_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e1bf      	b.n	800122c <canardHandleRxFrame+0x730>
     }

     if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8000eac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000eb0:	095b      	lsrs	r3, r3, #5
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ec6:	7ddb      	ldrb	r3, [r3, #23]
 8000ec8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d002      	beq.n	8000ed8 <canardHandleRxFrame+0x3dc>
     {
         return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8000ed2:	f06f 030d 	mvn.w	r3, #13
 8000ed6:	e1a9      	b.n	800122c <canardHandleRxFrame+0x730>
     }

     if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8000ed8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ee2:	7dd2      	ldrb	r2, [r2, #23]
 8000ee4:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d002      	beq.n	8000ef4 <canardHandleRxFrame+0x3f8>
     {
         return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8000eee:	f06f 030e 	mvn.w	r3, #14
 8000ef2:	e19b      	b.n	800122c <canardHandleRxFrame+0x730>
     }

     if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8000ef4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ef8:	09db      	lsrs	r3, r3, #7
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d061      	beq.n	8000fc8 <canardHandleRxFrame+0x4cc>
 8000f04:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f08:	099b      	lsrs	r3, r3, #6
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d159      	bne.n	8000fc8 <canardHandleRxFrame+0x4cc>
     {
         if (frame->data_len <= 3)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	7b1b      	ldrb	r3, [r3, #12]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d807      	bhi.n	8000f2c <canardHandleRxFrame+0x430>
         {
             return -CANARD_ERROR_RX_SHORT_FRAME;
 8000f1c:	f06f 030f 	mvn.w	r3, #15
 8000f20:	e184      	b.n	800122c <canardHandleRxFrame+0x730>
 8000f22:	bf00      	nop
 8000f24:	001e8481 	.word	0x001e8481
 8000f28:	000f4241 	.word	0x000f4241
         }

         // take off the crc and store the payload
         rx_state->timestamp_usec = timestamp_usec;
 8000f2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f32:	e9c1 2302 	strd	r2, r3, [r1, #8]
         rx_state->payload_len = 0;
 8000f36:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f38:	8ad3      	ldrh	r3, [r2, #22]
 8000f3a:	f36f 0309 	bfc	r3, #0, #10
 8000f3e:	82d3      	strh	r3, [r2, #22]
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f103 000c 	add.w	r0, r3, #12
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	1c9a      	adds	r2, r3, #2
                                                  (uint8_t) (frame->data_len - 3));
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	7b1b      	ldrb	r3, [r3, #12]
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000f50:	3b03      	subs	r3, #3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000f56:	f000 ff4f 	bl	8001df8 <bufferBlockPushBytes>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
         if (ret < 0)
 8000f60:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	da09      	bge.n	8000f7c <canardHandleRxFrame+0x480>
         {
             releaseStatePayload(ins, rx_state);
 8000f68:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f000 ff0f 	bl	8001d8e <releaseStatePayload>
             prepareForNextTransfer(rx_state);
 8000f70:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000f72:	f000 fe0d 	bl	8001b90 <prepareForNextTransfer>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 8000f76:	f06f 0302 	mvn.w	r3, #2
 8000f7a:	e157      	b.n	800122c <canardHandleRxFrame+0x730>
         }
         rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	791b      	ldrb	r3, [r3, #4]
 8000f80:	461a      	mov	r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	795b      	ldrb	r3, [r3, #5]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f90:	831a      	strh	r2, [r3, #24]
         rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8000f92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f96:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f9a:	f001 fa1a 	bl	80023d2 <crcAddSignature>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa4:	829a      	strh	r2, [r3, #20]
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa8:	8a98      	ldrh	r0, [r3, #20]
                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3304      	adds	r3, #4
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000fae:	1c99      	adds	r1, r3, #2
                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	7b1b      	ldrb	r3, [r3, #12]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	b2db      	uxtb	r3, r3
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f001 fa39 	bl	8002430 <crcAdd>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fc4:	829a      	strh	r2, [r3, #20]
     {
 8000fc6:	e124      	b.n	8001212 <canardHandleRxFrame+0x716>
     }
     else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8000fc8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fcc:	09db      	lsrs	r3, r3, #7
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d133      	bne.n	8001040 <canardHandleRxFrame+0x544>
 8000fd8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fdc:	099b      	lsrs	r3, r3, #6
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d12b      	bne.n	8001040 <canardHandleRxFrame+0x544>
     {
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f103 000c 	add.w	r0, r3, #12
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1d1a      	adds	r2, r3, #4
                                                  (uint8_t) (frame->data_len - 1));
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	7b1b      	ldrb	r3, [r3, #12]
         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ffc:	f000 fefc 	bl	8001df8 <bufferBlockPushBytes>
 8001000:	4603      	mov	r3, r0
 8001002:	87fb      	strh	r3, [r7, #62]	@ 0x3e
         if (ret < 0)
 8001004:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001008:	2b00      	cmp	r3, #0
 800100a:	da09      	bge.n	8001020 <canardHandleRxFrame+0x524>
         {
             releaseStatePayload(ins, rx_state);
 800100c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f000 febd 	bl	8001d8e <releaseStatePayload>
             prepareForNextTransfer(rx_state);
 8001014:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001016:	f000 fdbb 	bl	8001b90 <prepareForNextTransfer>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800101a:	f06f 0302 	mvn.w	r3, #2
 800101e:	e105      	b.n	800122c <canardHandleRxFrame+0x730>
         }
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001022:	8a98      	ldrh	r0, [r3, #20]
                                           frame->data, (uint8_t)(frame->data_len - 1));
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1d19      	adds	r1, r3, #4
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	7b1b      	ldrb	r3, [r3, #12]
 800102c:	3b01      	subs	r3, #1
 800102e:	b2db      	uxtb	r3, r3
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001030:	461a      	mov	r2, r3
 8001032:	f001 f9fd 	bl	8002430 <crcAdd>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800103c:	829a      	strh	r2, [r3, #20]
     {
 800103e:	e0e8      	b.n	8001212 <canardHandleRxFrame+0x716>
     }
     else                                                                            // End of a multi-frame transfer
     {
         const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	7b1b      	ldrb	r3, [r3, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

         uint8_t tail_offset = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

         if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8001050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001052:	8adb      	ldrh	r3, [r3, #22]
 8001054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001058:	b29b      	uxth	r3, r3
 800105a:	2b04      	cmp	r3, #4
 800105c:	d823      	bhi.n	80010a6 <canardHandleRxFrame+0x5aa>
         {
             // Copy the beginning of the frame into the head, point the tail pointer to the remainder
             for (size_t i = rx_state->payload_len;
 800105e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001060:	8adb      	ldrh	r3, [r3, #22]
 8001062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001066:	b29b      	uxth	r3, r3
 8001068:	667b      	str	r3, [r7, #100]	@ 0x64
 800106a:	e012      	b.n	8001092 <canardHandleRxFrame+0x596>
                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                  i++, tail_offset++)
             {
                 rx_state->buffer_head[i] = frame->data[tail_offset];
 800106c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	4413      	add	r3, r2
 8001074:	7919      	ldrb	r1, [r3, #4]
 8001076:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800107a:	4413      	add	r3, r2
 800107c:	331b      	adds	r3, #27
 800107e:	460a      	mov	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
                  i++, tail_offset++)
 8001082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001084:	3301      	adds	r3, #1
 8001086:	667b      	str	r3, [r7, #100]	@ 0x64
 8001088:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800108c:	3301      	adds	r3, #1
 800108e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 8001092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001094:	2b04      	cmp	r3, #4
 8001096:	d848      	bhi.n	800112a <canardHandleRxFrame+0x62e>
 8001098:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800109c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3e3      	bcc.n	800106c <canardHandleRxFrame+0x570>
 80010a4:	e041      	b.n	800112a <canardHandleRxFrame+0x62e>
             }
         }
         else
         {
             // Like above, except that the beginning goes into the last block of the storage
             CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f103 020c 	add.w	r2, r3, #12
 80010ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4619      	mov	r1, r3
 80010b2:	4610      	mov	r0, r2
 80010b4:	f7ff fca6 	bl	8000a04 <canardBufferFromIdx>
 80010b8:	6638      	str	r0, [r7, #96]	@ 0x60
             if (block != NULL)
 80010ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d034      	beq.n	800112a <canardHandleRxFrame+0x62e>
             {
                 size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 80010c0:	2305      	movs	r3, #5
 80010c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                 while (block->next != NULL)
 80010c4:	e005      	b.n	80010d2 <canardHandleRxFrame+0x5d6>
                 {
                     block = block->next;
 80010c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	663b      	str	r3, [r7, #96]	@ 0x60
                     offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 80010cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010ce:	331c      	adds	r3, #28
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                 while (block->next != NULL)
 80010d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f5      	bne.n	80010c6 <canardHandleRxFrame+0x5ca>
                 }
                 CANARD_ASSERT(block != NULL);

                 const size_t offset_within_block = rx_state->payload_len - offset;
 80010da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010dc:	8adb      	ldrh	r3, [r3, #22]
 80010de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
                 CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                 for (size_t i = offset_within_block;
 80010ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010f0:	e012      	b.n	8001118 <canardHandleRxFrame+0x61c>
                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                      i++, tail_offset++)
                 {
                     block->data[i] = frame->data[tail_offset];
 80010f2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	4413      	add	r3, r2
 80010fa:	7919      	ldrb	r1, [r3, #4]
 80010fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001100:	4413      	add	r3, r2
 8001102:	3304      	adds	r3, #4
 8001104:	460a      	mov	r2, r1
 8001106:	701a      	strb	r2, [r3, #0]
                      i++, tail_offset++)
 8001108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800110a:	3301      	adds	r3, #1
 800110c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800110e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001112:	3301      	adds	r3, #1
 8001114:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8001118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800111a:	2b1b      	cmp	r3, #27
 800111c:	d805      	bhi.n	800112a <canardHandleRxFrame+0x62e>
 800111e:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001122:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001126:	429a      	cmp	r2, r3
 8001128:	d3e3      	bcc.n	80010f2 <canardHandleRxFrame+0x5f6>
                 }
             }
         }

         CanardRxTransfer rx_transfer = {
 800112a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112e:	e9c7 2304 	strd	r2, r3, [r7, #16]
             .timestamp_usec = timestamp_usec,
             .payload_head = rx_state->buffer_head,
 8001132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001134:	331b      	adds	r3, #27
         CanardRxTransfer rx_transfer = {
 8001136:	61bb      	str	r3, [r7, #24]
             .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f103 020c 	add.w	r2, r3, #12
 800113e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f7ff fc5d 	bl	8000a04 <canardBufferFromIdx>
 800114a:	4603      	mov	r3, r0
         CanardRxTransfer rx_transfer = {
 800114c:	61fb      	str	r3, [r7, #28]
             .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 800114e:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001152:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001156:	429a      	cmp	r2, r3
 8001158:	d205      	bcs.n	8001166 <canardHandleRxFrame+0x66a>
 800115a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	3304      	adds	r3, #4
 8001164:	e000      	b.n	8001168 <canardHandleRxFrame+0x66c>
 8001166:	2300      	movs	r3, #0
         CanardRxTransfer rx_transfer = {
 8001168:	623b      	str	r3, [r7, #32]
             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 800116a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800116c:	8adb      	ldrh	r3, [r3, #22]
 800116e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800117a:	b29b      	uxth	r3, r3
 800117c:	4413      	add	r3, r2
 800117e:	b29b      	uxth	r3, r3
         CanardRxTransfer rx_transfer = {
 8001180:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001182:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001186:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800118c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
             .data_type_id = data_type_id,
             .transfer_type = (uint8_t)transfer_type,
             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8001190:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	b2db      	uxtb	r3, r3
         CanardRxTransfer rx_transfer = {
 800119a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800119e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80011a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011a6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80011aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 #elif CANARD_ENABLE_TAO_OPTION
             .tao = !ins->tao_disabled
 #endif
         };

         rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 80011ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]

         // CRC validation
         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 80011b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011b6:	8a98      	ldrh	r0, [r3, #20]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1d19      	adds	r1, r3, #4
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	7b1b      	ldrb	r3, [r3, #12]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	461a      	mov	r2, r3
 80011c4:	f001 f934 	bl	8002430 <crcAdd>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011ce:	829a      	strh	r2, [r3, #20]
         if (rx_state->calculated_crc == rx_state->payload_crc)
 80011d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011d2:	8a9a      	ldrh	r2, [r3, #20]
 80011d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011d6:	8b1b      	ldrh	r3, [r3, #24]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d106      	bne.n	80011ea <canardHandleRxFrame+0x6ee>
         {
             ins->on_reception(ins, &rx_transfer);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f107 0210 	add.w	r2, r7, #16
 80011e4:	4611      	mov	r1, r2
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	4798      	blx	r3
         }

         // Making sure the payload is released even if the application didn't bother with it
         canardReleaseRxTransferPayload(ins, &rx_transfer);
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 fa27 	bl	8001644 <canardReleaseRxTransferPayload>
         prepareForNextTransfer(rx_state);
 80011f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80011f8:	f000 fcca 	bl	8001b90 <prepareForNextTransfer>

         if (rx_state->calculated_crc == rx_state->payload_crc)
 80011fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011fe:	8a9a      	ldrh	r2, [r3, #20]
 8001200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001202:	8b1b      	ldrh	r3, [r3, #24]
 8001204:	429a      	cmp	r2, r3
 8001206:	d101      	bne.n	800120c <canardHandleRxFrame+0x710>
         {
             return CANARD_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	e00f      	b.n	800122c <canardHandleRxFrame+0x730>
         }
         else
         {
             return -CANARD_ERROR_RX_BAD_CRC;
 800120c:	f06f 0310 	mvn.w	r3, #16
 8001210:	e00c      	b.n	800122c <canardHandleRxFrame+0x730>
         }
     }

     rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8001212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001214:	7ddb      	ldrb	r3, [r3, #23]
 8001216:	b25b      	sxtb	r3, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	09db      	lsrs	r3, r3, #7
 800121e:	b2d9      	uxtb	r1, r3
 8001220:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001222:	7dd3      	ldrb	r3, [r2, #23]
 8001224:	f361 13c7 	bfi	r3, r1, #7, #1
 8001228:	75d3      	strb	r3, [r2, #23]
     return CANARD_OK;
 800122a:	2300      	movs	r3, #0
 }
 800122c:	4618      	mov	r0, r3
 800122e:	3774      	adds	r7, #116	@ 0x74
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001236:	bf00      	nop

08001238 <canardDecodeScalar>:
 int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                            uint32_t bit_offset,
                            uint8_t bit_length,
                            bool value_is_signed,
                            void* out_value)
 {
 8001238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123c:	b08d      	sub	sp, #52	@ 0x34
 800123e:	af00      	add	r7, sp, #0
 8001240:	61f8      	str	r0, [r7, #28]
 8001242:	61b9      	str	r1, [r7, #24]
 8001244:	4611      	mov	r1, r2
 8001246:	461a      	mov	r2, r3
 8001248:	460b      	mov	r3, r1
 800124a:	75fb      	strb	r3, [r7, #23]
 800124c:	4613      	mov	r3, r2
 800124e:	75bb      	strb	r3, [r7, #22]
     if (transfer == NULL || out_value == NULL)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <canardDecodeScalar+0x24>
 8001256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <canardDecodeScalar+0x2a>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800125c:	f06f 0301 	mvn.w	r3, #1
 8001260:	e16e      	b.n	8001540 <canardDecodeScalar+0x308>
     }

     if (bit_length < 1 || bit_length > 64)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <canardDecodeScalar+0x36>
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b40      	cmp	r3, #64	@ 0x40
 800126c:	d902      	bls.n	8001274 <canardDecodeScalar+0x3c>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 800126e:	f06f 0301 	mvn.w	r3, #1
 8001272:	e165      	b.n	8001540 <canardDecodeScalar+0x308>
     }

     if (bit_length == 1 && value_is_signed)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <canardDecodeScalar+0x4e>
 800127a:	7dbb      	ldrb	r3, [r7, #22]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <canardDecodeScalar+0x4e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 8001280:	f06f 0301 	mvn.w	r3, #1
 8001284:	e15c      	b.n	8001540 <canardDecodeScalar+0x308>
         uint64_t u64;
         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));   // This is important
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2208      	movs	r2, #8
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 fa2b 	bl	80066ea <memset>

     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	7dfa      	ldrb	r2, [r7, #23]
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	69f8      	ldr	r0, [r7, #28]
 800129e:	f000 ff33 	bl	8002108 <descatterTransferPayload>
 80012a2:	4603      	mov	r3, r0
 80012a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if (result <= 0)
 80012a6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc02      	bgt.n	80012b4 <canardDecodeScalar+0x7c>
     {
         return result;
 80012ae:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80012b2:	e145      	b.n	8001540 <canardDecodeScalar+0x308>
      * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
      * Extra most significant bits will be filled with zeroes, which is fine.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d018      	beq.n	80012f2 <canardDecodeScalar+0xba>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	08db      	lsrs	r3, r3, #3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3320      	adds	r3, #32
 80012c8:	f107 0210 	add.w	r2, r7, #16
 80012cc:	4413      	add	r3, r2
 80012ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012d2:	461a      	mov	r2, r3
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	425b      	negs	r3, r3
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	411a      	asrs	r2, r3
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	08db      	lsrs	r3, r3, #3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	3320      	adds	r3, #32
 80012e8:	f107 0110 	add.w	r1, r7, #16
 80012ec:	440b      	add	r3, r1
 80012ee:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
      */
     uint8_t std_byte_length = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d103      	bne.n	8001306 <canardDecodeScalar+0xce>
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001304:	e01e      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 8)   { std_byte_length = 1; }
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b08      	cmp	r3, #8
 800130a:	d803      	bhi.n	8001314 <canardDecodeScalar+0xdc>
 800130c:	2301      	movs	r3, #1
 800130e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001312:	e017      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 16)  { std_byte_length = 2; }
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d803      	bhi.n	8001322 <canardDecodeScalar+0xea>
 800131a:	2302      	movs	r3, #2
 800131c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001320:	e010      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 32)  { std_byte_length = 4; }
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	2b20      	cmp	r3, #32
 8001326:	d803      	bhi.n	8001330 <canardDecodeScalar+0xf8>
 8001328:	2304      	movs	r3, #4
 800132a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800132e:	e009      	b.n	8001344 <canardDecodeScalar+0x10c>
     else if (bit_length <= 64)  { std_byte_length = 8; }
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b40      	cmp	r3, #64	@ 0x40
 8001334:	d803      	bhi.n	800133e <canardDecodeScalar+0x106>
 8001336:	2308      	movs	r3, #8
 8001338:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800133c:	e002      	b.n	8001344 <canardDecodeScalar+0x10c>
     else
     {
         CANARD_ASSERT(false);
         return -CANARD_ERROR_INTERNAL;
 800133e:	f06f 0308 	mvn.w	r3, #8
 8001342:	e0fd      	b.n	8001540 <canardDecodeScalar+0x308>
     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

     /*
      * Flipping the byte order if needed.
      */
     if (isBigEndian())
 8001344:	f000 ffd5 	bl	80022f2 <isBigEndian>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <canardDecodeScalar+0x126>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 800134e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f000 ffdb 	bl	8002314 <swapByteOrder>

     /*
      * Extending the sign bit if needed. I miss templates.
      * Note that we operate on unsigned values in order to avoid undefined behaviors.
      */
     if (value_is_signed && (std_byte_length * 8 != bit_length))
 800135e:	7dbb      	ldrb	r3, [r7, #22]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 809b 	beq.w	800149c <canardDecodeScalar+0x264>
 8001366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	429a      	cmp	r2, r3
 8001370:	f000 8094 	beq.w	800149c <canardDecodeScalar+0x264>
     {
         if (bit_length <= 8)
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b08      	cmp	r3, #8
 8001378:	d819      	bhi.n	80013ae <canardDecodeScalar+0x176>
         {
             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 800137a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800137e:	461a      	mov	r2, r3
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	3b01      	subs	r3, #1
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8085 	beq.w	800149c <canardDecodeScalar+0x264>
             {
                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8001392:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	2101      	movs	r1, #1
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	425b      	negs	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f887 3020 	strb.w	r3, [r7, #32]
 80013ac:	e076      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 16)
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d815      	bhi.n	80013e0 <canardDecodeScalar+0x1a8>
         {
             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80013b4:	8c3b      	ldrh	r3, [r7, #32]
 80013b6:	461a      	mov	r2, r3
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d069      	beq.n	800149c <canardDecodeScalar+0x264>
             {
                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80013c8:	8c3a      	ldrh	r2, [r7, #32]
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	425b      	negs	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	843b      	strh	r3, [r7, #32]
 80013de:	e05d      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length <= 32)
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d811      	bhi.n	800140a <canardDecodeScalar+0x1d2>
         {
             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 80013e6:	6a3a      	ldr	r2, [r7, #32]
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d051      	beq.n	800149c <canardDecodeScalar+0x264>
             {
                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 80013f8:	6a3a      	ldr	r2, [r7, #32]
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	425b      	negs	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	e048      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else if (bit_length < 64)   // Strictly less, this is not a typo
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b3f      	cmp	r3, #63	@ 0x3f
 800140e:	d842      	bhi.n	8001496 <canardDecodeScalar+0x25e>
         {
             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001410:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001414:	7df9      	ldrb	r1, [r7, #23]
 8001416:	1e48      	subs	r0, r1, #1
 8001418:	f1c0 0620 	rsb	r6, r0, #32
 800141c:	f1a0 0120 	sub.w	r1, r0, #32
 8001420:	fa22 f400 	lsr.w	r4, r2, r0
 8001424:	fa03 f606 	lsl.w	r6, r3, r6
 8001428:	4334      	orrs	r4, r6
 800142a:	fa23 f101 	lsr.w	r1, r3, r1
 800142e:	430c      	orrs	r4, r1
 8001430:	fa23 f500 	lsr.w	r5, r3, r0
 8001434:	f004 0301 	and.w	r3, r4, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001442:	460b      	mov	r3, r1
 8001444:	4313      	orrs	r3, r2
 8001446:	d029      	beq.n	800149c <canardDecodeScalar+0x264>
             {
                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8001448:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800144c:	7df9      	ldrb	r1, [r7, #23]
 800144e:	f04f 0201 	mov.w	r2, #1
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	f1a1 0620 	sub.w	r6, r1, #32
 800145a:	f1c1 0020 	rsb	r0, r1, #32
 800145e:	fa03 f901 	lsl.w	r9, r3, r1
 8001462:	fa02 f606 	lsl.w	r6, r2, r6
 8001466:	ea49 0906 	orr.w	r9, r9, r6
 800146a:	fa22 f000 	lsr.w	r0, r2, r0
 800146e:	ea49 0900 	orr.w	r9, r9, r0
 8001472:	fa02 f801 	lsl.w	r8, r2, r1
 8001476:	2300      	movs	r3, #0
 8001478:	f1d8 0a00 	rsbs	sl, r8, #0
 800147c:	eb63 0b09 	sbc.w	fp, r3, r9
 8001480:	ea44 030a 	orr.w	r3, r4, sl
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	ea45 030b 	orr.w	r3, r5, fp
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001490:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001494:	e002      	b.n	800149c <canardDecodeScalar+0x264>
             }
         }
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001496:	f06f 0308 	mvn.w	r3, #8
 800149a:	e051      	b.n	8001540 <canardDecodeScalar+0x308>
     }

     /*
      * Copying the result out.
      */
     if (value_is_signed)
 800149c:	7dbb      	ldrb	r3, [r7, #22]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d022      	beq.n	80014e8 <canardDecodeScalar+0x2b0>
     {
         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d804      	bhi.n	80014b2 <canardDecodeScalar+0x27a>
 80014a8:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80014ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e044      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d804      	bhi.n	80014c2 <canardDecodeScalar+0x28a>
 80014b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80014bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	e03c      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d803      	bhi.n	80014d0 <canardDecodeScalar+0x298>
 80014c8:	6a3a      	ldr	r2, [r7, #32]
 80014ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e035      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	2b40      	cmp	r3, #64	@ 0x40
 80014d4:	d805      	bhi.n	80014e2 <canardDecodeScalar+0x2aa>
 80014d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80014dc:	e9c1 2300 	strd	r2, r3, [r1]
 80014e0:	e02c      	b.n	800153c <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 80014e2:	f06f 0308 	mvn.w	r3, #8
 80014e6:	e02b      	b.n	8001540 <canardDecodeScalar+0x308>
         }
     }
     else
     {
         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d104      	bne.n	80014f8 <canardDecodeScalar+0x2c0>
 80014ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e021      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d804      	bhi.n	8001508 <canardDecodeScalar+0x2d0>
 80014fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e019      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d803      	bhi.n	8001516 <canardDecodeScalar+0x2de>
 800150e:	8c3a      	ldrh	r2, [r7, #32]
 8001510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	e012      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b20      	cmp	r3, #32
 800151a:	d803      	bhi.n	8001524 <canardDecodeScalar+0x2ec>
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e00b      	b.n	800153c <canardDecodeScalar+0x304>
         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	2b40      	cmp	r3, #64	@ 0x40
 8001528:	d805      	bhi.n	8001536 <canardDecodeScalar+0x2fe>
 800152a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800152e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001530:	e9c1 2300 	strd	r2, r3, [r1]
 8001534:	e002      	b.n	800153c <canardDecodeScalar+0x304>
         else
         {
             CANARD_ASSERT(false);
             return -CANARD_ERROR_INTERNAL;
 8001536:	f06f 0308 	mvn.w	r3, #8
 800153a:	e001      	b.n	8001540 <canardDecodeScalar+0x308>
         }
     }

     CANARD_ASSERT(result <= bit_length);
     CANARD_ASSERT(result > 0);
     return result;
 800153c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 }
 8001540:	4618      	mov	r0, r3
 8001542:	3734      	adds	r7, #52	@ 0x34
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800154a <canardEncodeScalar>:

 void canardEncodeScalar(void* destination,
                         uint32_t bit_offset,
                         uint8_t bit_length,
                         const void* value)
 {
 800154a:	b580      	push	{r7, lr}
 800154c:	b08a      	sub	sp, #40	@ 0x28
 800154e:	af02      	add	r7, sp, #8
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	71fb      	strb	r3, [r7, #7]
      * Maybe not the best solution, but it simplifies the API.
      */
     CANARD_ASSERT(destination != NULL);
     CANARD_ASSERT(value != NULL);

     if (bit_length > 64)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b40      	cmp	r3, #64	@ 0x40
 800155e:	d901      	bls.n	8001564 <canardEncodeScalar+0x1a>
     {
         CANARD_ASSERT(false);
         bit_length = 64;
 8001560:	2340      	movs	r3, #64	@ 0x40
 8001562:	71fb      	strb	r3, [r7, #7]
     }

     if (bit_length < 1)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <canardEncodeScalar+0x24>
     {
         CANARD_ASSERT(false);
         bit_length = 1;
 800156a:	2301      	movs	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
         uint32_t u32;
         uint64_t u64;
         uint8_t bytes[8];
     } storage;

     memset(&storage, 0, sizeof(storage));
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	2208      	movs	r2, #8
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f005 f8b7 	bl	80066ea <memset>

     uint8_t std_byte_length = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	77fb      	strb	r3, [r7, #31]

     // Extra most significant bits can be safely ignored here.
     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <canardEncodeScalar+0x48>
 8001586:	2301      	movs	r3, #1
 8001588:	77fb      	strb	r3, [r7, #31]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	743b      	strb	r3, [r7, #16]
 8001590:	e024      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d805      	bhi.n	80015a4 <canardEncodeScalar+0x5a>
 8001598:	2301      	movs	r3, #1
 800159a:	77fb      	strb	r3, [r7, #31]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	743b      	strb	r3, [r7, #16]
 80015a2:	e01b      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d805      	bhi.n	80015b6 <canardEncodeScalar+0x6c>
 80015aa:	2302      	movs	r3, #2
 80015ac:	77fb      	strb	r3, [r7, #31]
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	823b      	strh	r3, [r7, #16]
 80015b4:	e012      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d805      	bhi.n	80015c8 <canardEncodeScalar+0x7e>
 80015bc:	2304      	movs	r3, #4
 80015be:	77fb      	strb	r3, [r7, #31]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	e009      	b.n	80015dc <canardEncodeScalar+0x92>
     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	2b40      	cmp	r3, #64	@ 0x40
 80015cc:	d806      	bhi.n	80015dc <canardEncodeScalar+0x92>
 80015ce:	2308      	movs	r3, #8
 80015d0:	77fb      	strb	r3, [r7, #31]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
             storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
         }
     }
 #endif

     if (isBigEndian())
 80015dc:	f000 fe89 	bl	80022f2 <isBigEndian>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <canardEncodeScalar+0xaa>
     {
         swapByteOrder(&storage.bytes[0], std_byte_length);
 80015e6:	7ffa      	ldrb	r2, [r7, #31]
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fe90 	bl	8002314 <swapByteOrder>
      * Extra least significant bits will be filled with zeroes, which is fine.
      * Extra most significant bits will be discarded here.
      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
      * not be taken if bit_length == 64, because 64 % 8 == 0.
      */
     if ((bit_length % 8) != 0)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d014      	beq.n	800162a <canardEncodeScalar+0xe0>
     {
         // coverity[overrun-local]
         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3320      	adds	r3, #32
 8001608:	443b      	add	r3, r7
 800160a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800160e:	461a      	mov	r2, r3
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	425b      	negs	r3, r3
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	409a      	lsls	r2, r3
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	3320      	adds	r3, #32
 8001624:	443b      	add	r3, r7
 8001626:	f803 2c10 	strb.w	r2, [r3, #-16]
     }

     /*
      * Now, the storage contains properly serialized scalar. Copying it out.
      */
     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 800162a:	79fa      	ldrb	r2, [r7, #7]
 800162c:	f107 0010 	add.w	r0, r7, #16
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2100      	movs	r1, #0
 8001638:	f000 fcef 	bl	800201a <copyBitArray>
 }
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <canardReleaseRxTransferPayload>:

 void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
 {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
     while (transfer->payload_middle != NULL)
 800164e:	e00f      	b.n	8001670 <canardReleaseRxTransferPayload+0x2c>
     {
         CanardBufferBlock* const temp = transfer->payload_middle->next;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
         freeBlock(&ins->allocator, transfer->payload_middle);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 020c 	add.w	r2, r3, #12
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4619      	mov	r1, r3
 8001664:	4610      	mov	r0, r2
 8001666:	f000 ff29 	bl	80024bc <freeBlock>
         transfer->payload_middle = temp;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	60da      	str	r2, [r3, #12]
     while (transfer->payload_middle != NULL)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1eb      	bne.n	8001650 <canardReleaseRxTransferPayload+0xc>
     }

     transfer->payload_middle = NULL;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
     transfer->payload_head = NULL;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
     transfer->payload_tail = NULL;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
     transfer->payload_len = 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	829a      	strh	r2, [r3, #20]
 }
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <computeTransferIDForwardDistance>:

 /*
  * Internal (static functions)
  */
 CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
 {
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	460a      	mov	r2, r1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
     int16_t d = (int16_t)(a - b);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	81fb      	strh	r3, [r7, #14]
     if (d < 0)
 80016b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da03      	bge.n	80016c6 <computeTransferIDForwardDistance+0x2e>
     {
         d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	3320      	adds	r3, #32
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	81fb      	strh	r3, [r7, #14]
     }
     return d;
 80016c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 }
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <incrementTransferID>:

 CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 {
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(transfer_id != NULL);

     (*transfer_id)++;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	701a      	strb	r2, [r3, #0]
     if (*transfer_id >= 32)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b1f      	cmp	r3, #31
 80016f0:	d902      	bls.n	80016f8 <incrementTransferID+0x22>
     {
         *transfer_id = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
     }
 }
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <dlcToDataLength>:

 CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
     /*
     Data Length Code      9  10  11  12  13  14  15
     Number of data bytes 12  16  20  24  32  48  64
     */
     if (dlc <= 8) {
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	2b08      	cmp	r3, #8
 8001712:	d801      	bhi.n	8001718 <dlcToDataLength+0x14>
         return dlc;
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	e01e      	b.n	8001756 <dlcToDataLength+0x52>
     } else if (dlc == 9) {
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	2b09      	cmp	r3, #9
 800171c:	d101      	bne.n	8001722 <dlcToDataLength+0x1e>
         return 12;
 800171e:	230c      	movs	r3, #12
 8001720:	e019      	b.n	8001756 <dlcToDataLength+0x52>
     } else if (dlc == 10) {
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b0a      	cmp	r3, #10
 8001726:	d101      	bne.n	800172c <dlcToDataLength+0x28>
         return 16;
 8001728:	2310      	movs	r3, #16
 800172a:	e014      	b.n	8001756 <dlcToDataLength+0x52>
     } else if (dlc == 11) {
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	2b0b      	cmp	r3, #11
 8001730:	d101      	bne.n	8001736 <dlcToDataLength+0x32>
         return 20;
 8001732:	2314      	movs	r3, #20
 8001734:	e00f      	b.n	8001756 <dlcToDataLength+0x52>
     } else if (dlc == 12) {
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d101      	bne.n	8001740 <dlcToDataLength+0x3c>
         return 24;
 800173c:	2318      	movs	r3, #24
 800173e:	e00a      	b.n	8001756 <dlcToDataLength+0x52>
     } else if (dlc == 13) {
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	2b0d      	cmp	r3, #13
 8001744:	d101      	bne.n	800174a <dlcToDataLength+0x46>
         return 32;
 8001746:	2320      	movs	r3, #32
 8001748:	e005      	b.n	8001756 <dlcToDataLength+0x52>
     } else if (dlc == 14) {
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	2b0e      	cmp	r3, #14
 800174e:	d101      	bne.n	8001754 <dlcToDataLength+0x50>
         return 48;
 8001750:	2330      	movs	r3, #48	@ 0x30
 8001752:	e000      	b.n	8001756 <dlcToDataLength+0x52>
     }
     return 64;
 8001754:	2340      	movs	r3, #64	@ 0x40
 }
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <dataLengthToDlc>:

 CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	80fb      	strh	r3, [r7, #6]
     if (data_length <= 8) {
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	2b08      	cmp	r3, #8
 8001770:	d801      	bhi.n	8001776 <dataLengthToDlc+0x14>
         return data_length;
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	e01e      	b.n	80017b4 <dataLengthToDlc+0x52>
     } else if (data_length <= 12) {
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	2b0c      	cmp	r3, #12
 800177a:	d801      	bhi.n	8001780 <dataLengthToDlc+0x1e>
         return 9;
 800177c:	2309      	movs	r3, #9
 800177e:	e019      	b.n	80017b4 <dataLengthToDlc+0x52>
     } else if (data_length <= 16) {
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d801      	bhi.n	800178a <dataLengthToDlc+0x28>
         return 10;
 8001786:	230a      	movs	r3, #10
 8001788:	e014      	b.n	80017b4 <dataLengthToDlc+0x52>
     } else if (data_length <= 20) {
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	2b14      	cmp	r3, #20
 800178e:	d801      	bhi.n	8001794 <dataLengthToDlc+0x32>
         return 11;
 8001790:	230b      	movs	r3, #11
 8001792:	e00f      	b.n	80017b4 <dataLengthToDlc+0x52>
     } else if (data_length <= 24) {
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	2b18      	cmp	r3, #24
 8001798:	d801      	bhi.n	800179e <dataLengthToDlc+0x3c>
         return 12;
 800179a:	230c      	movs	r3, #12
 800179c:	e00a      	b.n	80017b4 <dataLengthToDlc+0x52>
     } else if (data_length <= 32) {
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d801      	bhi.n	80017a8 <dataLengthToDlc+0x46>
         return 13;
 80017a4:	230d      	movs	r3, #13
 80017a6:	e005      	b.n	80017b4 <dataLengthToDlc+0x52>
     } else if (data_length <= 48) {
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	2b30      	cmp	r3, #48	@ 0x30
 80017ac:	d801      	bhi.n	80017b2 <dataLengthToDlc+0x50>
         return 14;
 80017ae:	230e      	movs	r3, #14
 80017b0:	e000      	b.n	80017b4 <dataLengthToDlc+0x52>
     }
     return 15;
 80017b2:	230f      	movs	r3, #15
 }
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <enqueueTxFrames>:
 CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                         uint32_t can_id,
                                         uint16_t crc,
                                         CanardTxTransfer* transfer
 )
 {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	@ 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	80fb      	strh	r3, [r7, #6]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

     if (transfer->inout_transfer_id == NULL)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <enqueueTxFrames+0x1e>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80017d8:	f06f 0301 	mvn.w	r3, #1
 80017dc:	e11c      	b.n	8001a18 <enqueueTxFrames+0x258>
     }

     if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	8c1b      	ldrh	r3, [r3, #32]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <enqueueTxFrames+0x34>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <enqueueTxFrames+0x34>
     {
         return -CANARD_ERROR_INVALID_ARGUMENT;
 80017ee:	f06f 0301 	mvn.w	r3, #1
 80017f2:	e111      	b.n	8001a18 <enqueueTxFrames+0x258>
     }

     int16_t result = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 #if CANARD_ENABLE_CANFD
     uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
 #else
     uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 80017f8:	2308      	movs	r3, #8
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 #endif
     if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	8c1a      	ldrh	r2, [r3, #32]
 8001802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001806:	b29b      	uxth	r3, r3
 8001808:	429a      	cmp	r2, r3
 800180a:	d24b      	bcs.n	80018a4 <enqueueTxFrames+0xe4>
     {
         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	330c      	adds	r3, #12
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f94a 	bl	8001aaa <createTxItem>
 8001816:	6178      	str	r0, [r7, #20]
         if (queue_item == NULL)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <enqueueTxFrames+0x64>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 800181e:	f06f 0302 	mvn.w	r3, #2
 8001822:	e0f9      	b.n	8001a18 <enqueueTxFrames+0x258>
         }

         memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f103 0008 	add.w	r0, r3, #8
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	69d9      	ldr	r1, [r3, #28]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	8c1b      	ldrh	r3, [r3, #32]
 8001832:	461a      	mov	r2, r3
 8001834:	f004 ff86 	bl	8006744 <memcpy>

         transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	8c1b      	ldrh	r3, [r3, #32]
 800183c:	3301      	adds	r3, #1
 800183e:	b29b      	uxth	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff8e 	bl	8001762 <dataLengthToDlc>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5b 	bl	8001704 <dlcToDataLength>
 800184e:	4603      	mov	r3, r0
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	841a      	strh	r2, [r3, #32]
         queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	8c1b      	ldrh	r3, [r3, #32]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3301      	adds	r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	741a      	strb	r2, [r3, #16]
         queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	b2db      	uxtb	r3, r3
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	8c12      	ldrh	r2, [r2, #32]
 8001876:	4611      	mov	r1, r2
 8001878:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800187c:	b2da      	uxtb	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	440b      	add	r3, r1
 8001882:	721a      	strb	r2, [r3, #8]
         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	605a      	str	r2, [r3, #4]
         queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
         queue_item->frame.canfd = transfer->canfd;
 #endif
         pushTxQueue(ins, queue_item);
 800188e:	6979      	ldr	r1, [r7, #20]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f8c5 	bl	8001a20 <pushTxQueue>
         result++;
 8001896:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800189a:	b29b      	uxth	r3, r3
 800189c:	3301      	adds	r3, #1
 800189e:	b29b      	uxth	r3, r3
 80018a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018a2:	e0b7      	b.n	8001a14 <enqueueTxFrames+0x254>
     }
     else                                                                    // Multi frame transfer
     {
         uint16_t data_index = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         uint8_t toggle = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
         uint8_t sot_eot = 0x80;
 80018ae:	2380      	movs	r3, #128	@ 0x80
 80018b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
           see if we are going to be able to allocate enough blocks for
           this transfer. If not then stop now, otherwise we will end
           up doing a partial (corrupt) transfer which will just make
           the situation worse as it will waste bus bandwidth
          */
         const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	8c1b      	ldrh	r3, [r3, #32]
 80018b8:	3302      	adds	r3, #2
 80018ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
         const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 80018bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018c0:	3b01      	subs	r3, #1
 80018c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 80018c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018cc:	3b01      	subs	r3, #1
 80018ce:	441a      	add	r2, r3
 80018d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d8:	843b      	strh	r3, [r7, #32]
         const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8a9a      	ldrh	r2, [r3, #20]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8adb      	ldrh	r3, [r3, #22]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	83fb      	strh	r3, [r7, #30]
         if (blocks_available < frames_needed) {
 80018e6:	8bfa      	ldrh	r2, [r7, #30]
 80018e8:	8c3b      	ldrh	r3, [r7, #32]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d202      	bcs.n	80018f4 <enqueueTxFrames+0x134>
             return -CANARD_ERROR_OUT_OF_MEMORY;
 80018ee:	f06f 0302 	mvn.w	r3, #2
 80018f2:	e091      	b.n	8001a18 <enqueueTxFrames+0x258>
         }

         CanardTxQueueItem* queue_item = NULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]

         while (transfer->payload_len - data_index != 0)
 80018f8:	e086      	b.n	8001a08 <enqueueTxFrames+0x248>
         {
             queue_item = createTxItem(&ins->allocator);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	330c      	adds	r3, #12
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f8d3 	bl	8001aaa <createTxItem>
 8001904:	61b8      	str	r0, [r7, #24]
             if (queue_item == NULL)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <enqueueTxFrames+0x152>
             {
                 CANARD_ASSERT(false);
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 800190c:	f06f 0302 	mvn.w	r3, #2
 8001910:	e082      	b.n	8001a18 <enqueueTxFrames+0x258>
             }

             uint16_t i = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	853b      	strh	r3, [r7, #40]	@ 0x28
             if (data_index == 0)
 8001916:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10c      	bne.n	8001936 <enqueueTxFrames+0x176>
             {
                 // add crc
                 queue_item->frame.data[0] = (uint8_t) (crc);
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	721a      	strb	r2, [r3, #8]
                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b2da      	uxtb	r2, r3
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	725a      	strb	r2, [r3, #9]
                 i = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001934:	e012      	b.n	800195c <enqueueTxFrames+0x19c>
             }
             else
             {
                 i = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	853b      	strh	r3, [r7, #40]	@ 0x28
             }

             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 800193a:	e00f      	b.n	800195c <enqueueTxFrames+0x19c>
             {
                 queue_item->frame.data[i] = transfer->payload[data_index];
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	69da      	ldr	r2, [r3, #28]
 8001940:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001942:	441a      	add	r2, r3
 8001944:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001946:	7811      	ldrb	r1, [r2, #0]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4413      	add	r3, r2
 800194c:	460a      	mov	r2, r1
 800194e:	721a      	strb	r2, [r3, #8]
             for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001950:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001952:	3301      	adds	r3, #1
 8001954:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001956:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001958:	3301      	adds	r3, #1
 800195a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800195c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001962:	3b01      	subs	r3, #1
 8001964:	429a      	cmp	r2, r3
 8001966:	da04      	bge.n	8001972 <enqueueTxFrames+0x1b2>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	8c1b      	ldrh	r3, [r3, #32]
 800196c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800196e:	429a      	cmp	r2, r3
 8001970:	d3e4      	bcc.n	800193c <enqueueTxFrames+0x17c>
             }
             // tail byte
             sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	8c1b      	ldrh	r3, [r3, #32]
 8001976:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001978:	429a      	cmp	r2, r3
 800197a:	d002      	beq.n	8001982 <enqueueTxFrames+0x1c2>
 800197c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001980:	e000      	b.n	8001984 <enqueueTxFrames+0x1c4>
 8001982:	2340      	movs	r3, #64	@ 0x40
 8001984:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

             i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001988:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800198a:	3301      	adds	r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fee7 	bl	8001762 <dataLengthToDlc>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff feb4 	bl	8001704 <dlcToDataLength>
 800199c:	4603      	mov	r3, r0
 800199e:	3b01      	subs	r3, #1
 80019a0:	853b      	strh	r3, [r7, #40]	@ 0x28
             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 80019a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b2d9      	uxtb	r1, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019c0:	430a      	orrs	r2, r1
 80019c2:	b2d1      	uxtb	r1, r2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4413      	add	r3, r2
 80019c8:	460a      	mov	r2, r1
 80019ca:	721a      	strb	r2, [r3, #8]
             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	605a      	str	r2, [r3, #4]
             queue_item->frame.data_len = (uint8_t)(i + 1);
 80019d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	741a      	strb	r2, [r3, #16]
             queue_item->frame.iface_mask = transfer->iface_mask;
 #endif
 #if CANARD_ENABLE_CANFD
             queue_item->frame.canfd = transfer->canfd;
 #endif
             pushTxQueue(ins, queue_item);
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f81b 	bl	8001a20 <pushTxQueue>

             result++;
 80019ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
             toggle ^= 1;
 80019f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
             sot_eot = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
         while (transfer->payload_len - data_index != 0)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	8c1b      	ldrh	r3, [r3, #32]
 8001a0c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f47f af73 	bne.w	80018fa <enqueueTxFrames+0x13a>
         }
     }

     return result;
 8001a14:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 }
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3730      	adds	r7, #48	@ 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <pushTxQueue>:

 /**
  * Puts frame on on the TX queue. Higher priority placed first
  */
 CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(ins != NULL);
     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

     if (ins->tx_queue == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <pushTxQueue+0x1a>
     {
         ins->tx_queue = item;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24
         return;
 8001a38:	e034      	b.n	8001aa4 <pushTxQueue+0x84>
     }

     CanardTxQueueItem* queue = ins->tx_queue;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	60fb      	str	r3, [r7, #12]
     CanardTxQueueItem* previous = ins->tx_queue;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	60bb      	str	r3, [r7, #8]

     while (queue != NULL)
 8001a46:	e02a      	b.n	8001a9e <pushTxQueue+0x7e>
     {
         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f000 f840 	bl	8001ad8 <isPriorityHigher>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d012      	beq.n	8001a84 <pushTxQueue+0x64>
         {
             if (queue == ins->tx_queue)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d106      	bne.n	8001a76 <pushTxQueue+0x56>
             {
                 item->next = queue;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	601a      	str	r2, [r3, #0]
                 ins->tx_queue = item;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	625a      	str	r2, [r3, #36]	@ 0x24
             else
             {
                 previous->next = item;
                 item->next = queue;
             }
             return;
 8001a74:	e016      	b.n	8001aa4 <pushTxQueue+0x84>
                 previous->next = item;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	601a      	str	r2, [r3, #0]
                 item->next = queue;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	601a      	str	r2, [r3, #0]
             return;
 8001a82:	e00f      	b.n	8001aa4 <pushTxQueue+0x84>
         }
         else
         {
             if (queue->next == NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <pushTxQueue+0x74>
             {
                 queue->next = item;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
                 return;
 8001a92:	e007      	b.n	8001aa4 <pushTxQueue+0x84>
             }
             else
             {
                 previous = queue;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	60bb      	str	r3, [r7, #8]
                 queue = queue->next;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
     while (queue != NULL)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1d1      	bne.n	8001a48 <pushTxQueue+0x28>
             }
         }
     }
 }
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <createTxItem>:

 /**
  * Creates new tx queue item from allocator
  */
 CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
 {
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fcd9 	bl	800246a <allocateBlock>
 8001ab8:	60f8      	str	r0, [r7, #12]
     if (item == NULL)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <createTxItem+0x1a>
     {
         return NULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e005      	b.n	8001ad0 <createTxItem+0x26>
     }
     memset(item, 0, sizeof(*item));
 8001ac4:	2214      	movs	r2, #20
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f004 fe0e 	bl	80066ea <memset>
     return item;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 }
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <isPriorityHigher>:

 /**
  * Returns true if priority of rhs is higher than id
  */
 CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
 {
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001ae8:	61fb      	str	r3, [r7, #28]
     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001af0:	61bb      	str	r3, [r7, #24]

     /*
      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
      */
     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	0fdb      	lsrs	r3, r3, #31
 8001af6:	75fb      	strb	r3, [r7, #23]
     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0fdb      	lsrs	r3, r3, #31
 8001afc:	75bb      	strb	r3, [r7, #22]
     if (ext != rhs_ext)
 8001afe:	7dfa      	ldrb	r2, [r7, #23]
 8001b00:	7dbb      	ldrb	r3, [r7, #22]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d01d      	beq.n	8001b42 <isPriorityHigher+0x6a>
     {
         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <isPriorityHigher+0x3a>
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	0c9b      	lsrs	r3, r3, #18
 8001b10:	e000      	b.n	8001b14 <isPriorityHigher+0x3c>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	613b      	str	r3, [r7, #16]
         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001b16:	7dbb      	ldrb	r3, [r7, #22]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <isPriorityHigher+0x4a>
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	0c9b      	lsrs	r3, r3, #18
 8001b20:	e000      	b.n	8001b24 <isPriorityHigher+0x4c>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	60fb      	str	r3, [r7, #12]
         if (arb11 != rhs_arb11)
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d007      	beq.n	8001b3e <isPriorityHigher+0x66>
         {
             return arb11 < rhs_arb11;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	bf34      	ite	cc
 8001b36:	2301      	movcc	r3, #1
 8001b38:	2300      	movcs	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	e022      	b.n	8001b84 <isPriorityHigher+0xac>
         }
         else
         {
             return rhs_ext;
 8001b3e:	7dbb      	ldrb	r3, [r7, #22]
 8001b40:	e020      	b.n	8001b84 <isPriorityHigher+0xac>
     }

     /*
      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
      */
     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	757b      	strb	r3, [r7, #21]
     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	753b      	strb	r3, [r7, #20]
     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d105      	bne.n	8001b76 <isPriorityHigher+0x9e>
 8001b6a:	7d7a      	ldrb	r2, [r7, #21]
 8001b6c:	7d3b      	ldrb	r3, [r7, #20]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <isPriorityHigher+0x9e>
     {
         return rhs_rtr;
 8001b72:	7d3b      	ldrb	r3, [r7, #20]
 8001b74:	e006      	b.n	8001b84 <isPriorityHigher+0xac>
     }

     /*
      * Plain ID arbitration - greater value loses.
      */
     return clean_id < rhs_clean_id;
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	bf34      	ite	cc
 8001b7e:	2301      	movcc	r3, #1
 8001b80:	2300      	movcs	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 }
 8001b84:	4618      	mov	r0, r3
 8001b86:	3724      	adds	r7, #36	@ 0x24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <prepareForNextTransfer>:

 /**
  * preps the rx state for the next transfer. does not delete the state
  */
 CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
 {
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
     CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
     state->transfer_id++;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7ddb      	ldrb	r3, [r3, #23]
 8001b9c:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	b2d9      	uxtb	r1, r3
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	7dd3      	ldrb	r3, [r2, #23]
 8001bae:	f361 0386 	bfi	r3, r1, #2, #5
 8001bb2:	75d3      	strb	r3, [r2, #23]
     state->payload_len = 0;
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	8ad3      	ldrh	r3, [r2, #22]
 8001bb8:	f36f 0309 	bfc	r3, #0, #10
 8001bbc:	82d3      	strh	r3, [r2, #22]
     state->next_toggle = 0;
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	7dd3      	ldrb	r3, [r2, #23]
 8001bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bc6:	75d3      	strb	r3, [r2, #23]
 }
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <extractDataType>:

 /**
  * returns data type from id
  */
 uint16_t extractDataType(uint32_t id)
 {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
     if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f819 	bl	8001c14 <extractTransferType>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d10e      	bne.n	8001c06 <extractDataType+0x32>
     {
         uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	81fb      	strh	r3, [r7, #14]
         if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <extractDataType+0x2e>
         {
             dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	81fb      	strh	r3, [r7, #14]
         }
         return dtid;
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	e002      	b.n	8001c0c <extractDataType+0x38>
     }
     else
     {
         return (uint16_t) SRV_TYPE_FROM_ID(id);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	b2db      	uxtb	r3, r3
     }
 }
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <extractTransferType>:

 /**
  * returns transfer type from id
  */
 CanardTransferType extractTransferType(uint32_t id)
 {
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
     const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	09db      	lsrs	r3, r3, #7
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
     if (!is_service)
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <extractTransferType+0x2a>
     {
         return CanardTransferTypeBroadcast;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e008      	b.n	8001c50 <extractTransferType+0x3c>
     }
     else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0bdb      	lsrs	r3, r3, #15
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <extractTransferType+0x3a>
     {
         return CanardTransferTypeRequest;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <extractTransferType+0x3c>
     }
     else
     {
         return CanardTransferTypeResponse;
 8001c4e:	2300      	movs	r3, #0
     }
 }
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <traverseRxStates>:
 /**
  * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
  * with either the Id or a new one at the end
  */
 CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
 {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
     CanardRxState* states = ins->rx_states;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	60fb      	str	r3, [r7, #12]

     if (states == NULL) // initialize CanardRxStates
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d110      	bne.n	8001c94 <traverseRxStates+0x38>
     {
         states = createRxState(&ins->allocator, transfer_descriptor);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	330c      	adds	r3, #12
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f865 	bl	8001d48 <createRxState>
 8001c7e:	60f8      	str	r0, [r7, #12]

         if(states == NULL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <traverseRxStates+0x2e>
         {
             return NULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e013      	b.n	8001cb2 <traverseRxStates+0x56>
         }

         ins->rx_states = states;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	621a      	str	r2, [r3, #32]
         return states;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	e00e      	b.n	8001cb2 <traverseRxStates+0x56>
     }

     states = findRxState(ins, transfer_descriptor);
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f80f 	bl	8001cba <findRxState>
 8001c9c:	60f8      	str	r0, [r7, #12]
     if (states != NULL)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <traverseRxStates+0x4c>
     {
         return states;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	e004      	b.n	8001cb2 <traverseRxStates+0x56>
     }
     else
     {
         return prependRxState(ins, transfer_descriptor);
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f827 	bl	8001cfe <prependRxState>
 8001cb0:	4603      	mov	r3, r0
     }
 }
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <findRxState>:

 /**
  * returns pointer to the rx state of transfer descriptor or null if not found
  */
 CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
 {
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
     CanardRxState *state = ins->rx_states;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	60fb      	str	r3, [r7, #12]
     while (state != NULL)
 8001cca:	e010      	b.n	8001cee <findRxState+0x34>
     {
         if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d101      	bne.n	8001cda <findRxState+0x20>
         {
             return state;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	e00d      	b.n	8001cf6 <findRxState+0x3c>
         }
         state = canardRxFromIdx(&ins->allocator, state->next);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f103 020c 	add.w	r2, r3, #12
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f7fe fea4 	bl	8000a34 <canardRxFromIdx>
 8001cec:	60f8      	str	r0, [r7, #12]
     while (state != NULL)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1eb      	bne.n	8001ccc <findRxState+0x12>
     }
     return NULL;
 8001cf4:	2300      	movs	r3, #0
 }
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <prependRxState>:

 /**
  * prepends rx state to the canard instance rx_states
  */
 CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
 {
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
     CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	330c      	adds	r3, #12
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f81a 	bl	8001d48 <createRxState>
 8001d14:	60f8      	str	r0, [r7, #12]

     if(state == NULL)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <prependRxState+0x22>
     {
         return NULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e00f      	b.n	8001d40 <prependRxState+0x42>
     }

     state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f103 020c 	add.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f7fe fe8d 	bl	8000a4c <canardRxToIdx>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	601a      	str	r2, [r3, #0]
     ins->rx_states = state;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	621a      	str	r2, [r3, #32]
     return state;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 }
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <createRxState>:

 CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
 {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	@ 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
     CanardRxState init = {
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	2220      	movs	r2, #32
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 fcc5 	bl	80066ea <memset>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	61bb      	str	r3, [r7, #24]
         .next = CANARD_BUFFER_IDX_NONE,
         .buffer_blocks = CANARD_BUFFER_IDX_NONE,
         .dtid_tt_snid_dnid = transfer_descriptor
     };

     CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fb80 	bl	800246a <allocateBlock>
 8001d6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
     if (state == NULL)
 8001d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <createRxState+0x2e>
     {
         return NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e007      	b.n	8001d86 <createRxState+0x3e>
     }
     memcpy(state, &init, sizeof(*state));
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d80:	f004 fce0 	bl	8006744 <memcpy>

     return state;
 8001d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 }
 8001d86:	4618      	mov	r0, r3
 8001d88:	3730      	adds	r7, #48	@ 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <releaseStatePayload>:

 CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
 {
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
     while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001d98:	e01b      	b.n	8001dd2 <releaseStatePayload+0x44>
     {
         CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f103 020c 	add.w	r2, r3, #12
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f7fe fe2c 	bl	8000a04 <canardBufferFromIdx>
 8001dac:	60f8      	str	r0, [r7, #12]
         CanardBufferBlock* const temp = block->next;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60bb      	str	r3, [r7, #8]
         freeBlock(&ins->allocator, block);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	330c      	adds	r3, #12
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fb7e 	bl	80024bc <freeBlock>
         rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	330c      	adds	r3, #12
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fe28 	bl	8000a1c <canardBufferToIdx>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
     while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1df      	bne.n	8001d9a <releaseStatePayload+0xc>
     }
     rxstate->payload_len = 0;
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	8ad3      	ldrh	r3, [r2, #22]
 8001dde:	f36f 0309 	bfc	r3, #0, #10
 8001de2:	82d3      	strh	r3, [r2, #22]
     return CANARD_OK;
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 }
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <bufferBlockPushBytes>:
  */
 CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                              CanardRxState* state,
                                              const uint8_t* data,
                                              uint8_t data_len)
 {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	70fb      	strb	r3, [r7, #3]
     uint16_t data_index = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	84fb      	strh	r3, [r7, #38]	@ 0x26

     // if head is not full, add data to head
     if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	8adb      	ldrh	r3, [r3, #22]
 8001e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d036      	beq.n	8001e86 <bufferBlockPushBytes+0x8e>
     {
         for (uint16_t i = (uint16_t)state->payload_len;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	8adb      	ldrh	r3, [r3, #22]
 8001e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001e24:	e00e      	b.n	8001e44 <bufferBlockPushBytes+0x4c>
              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
              i++, data_index++)
         {
             state->buffer_head[i] = data[data_index];
 8001e26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	441a      	add	r2, r3
 8001e2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e2e:	7811      	ldrb	r1, [r2, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	4413      	add	r3, r2
 8001e34:	460a      	mov	r2, r1
 8001e36:	76da      	strb	r2, [r3, #27]
              i++, data_index++)
 8001e38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001e3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e40:	3301      	adds	r3, #1
 8001e42:	84fb      	strh	r3, [r7, #38]	@ 0x26
              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8001e44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d804      	bhi.n	8001e54 <bufferBlockPushBytes+0x5c>
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d3e8      	bcc.n	8001e26 <bufferBlockPushBytes+0x2e>
         }
         if (data_index >= data_len)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d313      	bcc.n	8001e86 <bufferBlockPushBytes+0x8e>
         {
             state->payload_len =
                 (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	8adb      	ldrh	r3, [r3, #22]
 8001e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e76:	b299      	uxth	r1, r3
             state->payload_len =
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	8ad3      	ldrh	r3, [r2, #22]
 8001e7c:	f361 0309 	bfi	r3, r1, #0, #10
 8001e80:	82d3      	strh	r3, [r2, #22]
             return 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0ae      	b.n	8001fe4 <bufferBlockPushBytes+0x1ec>
         }
     } // head is full.

     uint16_t index_at_nth_block =
         (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	8adb      	ldrh	r3, [r3, #22]
 8001e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	1f5a      	subs	r2, r3, #5
 8001e92:	0893      	lsrs	r3, r2, #2
 8001e94:	4955      	ldr	r1, [pc, #340]	@ (8001fec <bufferBlockPushBytes+0x1f4>)
 8001e96:	fba1 3103 	umull	r3, r1, r1, r3
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	1a5b      	subs	r3, r3, r1
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	1ad3      	subs	r3, r2, r3
     uint16_t index_at_nth_block =
 8001ea4:	847b      	strh	r3, [r7, #34]	@ 0x22

     // get to current block
     CanardBufferBlock* block = NULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]

     // buffer blocks uninitialized
     if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d113      	bne.n	8001eda <bufferBlockPushBytes+0xe2>
     {
         block = createBufferBlock(allocator);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f89c 	bl	8001ff0 <createBufferBlock>
 8001eb8:	61f8      	str	r0, [r7, #28]
         state->buffer_blocks = canardBufferToIdx(allocator, block);
 8001eba:	69f9      	ldr	r1, [r7, #28]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7fe fdad 	bl	8000a1c <canardBufferToIdx>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	605a      	str	r2, [r3, #4]
         if (block == NULL)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <bufferBlockPushBytes+0xdc>
         {
             return -CANARD_ERROR_OUT_OF_MEMORY;
 8001ece:	f06f 0302 	mvn.w	r3, #2
 8001ed2:	e087      	b.n	8001fe4 <bufferBlockPushBytes+0x1ec>
         }

         index_at_nth_block = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001ed8:	e06c      	b.n	8001fb4 <bufferBlockPushBytes+0x1bc>
     }
     else
     {
         uint16_t nth_block = 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	837b      	strh	r3, [r7, #26]

         // get to block
         block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7fe fd8d 	bl	8000a04 <canardBufferFromIdx>
 8001eea:	61f8      	str	r0, [r7, #28]
         while (block->next != NULL)
 8001eec:	e005      	b.n	8001efa <bufferBlockPushBytes+0x102>
         {
             nth_block++;
 8001eee:	8b7b      	ldrh	r3, [r7, #26]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	837b      	strh	r3, [r7, #26]
             block = block->next;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61fb      	str	r3, [r7, #28]
         while (block->next != NULL)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f5      	bne.n	8001eee <bufferBlockPushBytes+0xf6>
         }

         const uint16_t num_buffer_blocks =
             (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	8adb      	ldrh	r3, [r3, #22]
 8001f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	4413      	add	r3, r2
 8001f12:	3b05      	subs	r3, #5
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	4a35      	ldr	r2, [pc, #212]	@ (8001fec <bufferBlockPushBytes+0x1f4>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	b29b      	uxth	r3, r3
         const uint16_t num_buffer_blocks =
 8001f1e:	3301      	adds	r3, #1
 8001f20:	82fb      	strh	r3, [r7, #22]
                          CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

         if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8001f22:	8afa      	ldrh	r2, [r7, #22]
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d944      	bls.n	8001fb4 <bufferBlockPushBytes+0x1bc>
 8001f2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d141      	bne.n	8001fb4 <bufferBlockPushBytes+0x1bc>
         {
             block->next = createBufferBlock(allocator);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f85d 	bl	8001ff0 <createBufferBlock>
 8001f36:	4602      	mov	r2, r0
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	601a      	str	r2, [r3, #0]
             if (block->next == NULL)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <bufferBlockPushBytes+0x152>
             {
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 8001f44:	f06f 0302 	mvn.w	r3, #2
 8001f48:	e04c      	b.n	8001fe4 <bufferBlockPushBytes+0x1ec>
             }
             block = block->next;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	61fb      	str	r3, [r7, #28]
         }
     }

     // add data to current block until it becomes full, add new block if necessary
     while (data_index < data_len)
 8001f50:	e030      	b.n	8001fb4 <bufferBlockPushBytes+0x1bc>
     {
         for (uint16_t i = index_at_nth_block;
 8001f52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f54:	833b      	strh	r3, [r7, #24]
 8001f56:	e00e      	b.n	8001f76 <bufferBlockPushBytes+0x17e>
              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
              i++, data_index++)
         {
             block->data[i] = data[data_index];
 8001f58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	441a      	add	r2, r3
 8001f5e:	8b3b      	ldrh	r3, [r7, #24]
 8001f60:	7811      	ldrb	r1, [r2, #0]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	460a      	mov	r2, r1
 8001f68:	711a      	strb	r2, [r3, #4]
              i++, data_index++)
 8001f6a:	8b3b      	ldrh	r3, [r7, #24]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	833b      	strh	r3, [r7, #24]
 8001f70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f72:	3301      	adds	r3, #1
 8001f74:	84fb      	strh	r3, [r7, #38]	@ 0x26
              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 8001f76:	8b3b      	ldrh	r3, [r7, #24]
 8001f78:	2b1b      	cmp	r3, #27
 8001f7a:	d804      	bhi.n	8001f86 <bufferBlockPushBytes+0x18e>
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3e8      	bcc.n	8001f58 <bufferBlockPushBytes+0x160>
         }

         if (data_index < data_len)
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d211      	bcs.n	8001fb4 <bufferBlockPushBytes+0x1bc>
         {
             block->next = createBufferBlock(allocator);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f82d 	bl	8001ff0 <createBufferBlock>
 8001f96:	4602      	mov	r2, r0
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	601a      	str	r2, [r3, #0]
             if (block->next == NULL)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <bufferBlockPushBytes+0x1b2>
             {
                 return -CANARD_ERROR_OUT_OF_MEMORY;
 8001fa4:	f06f 0302 	mvn.w	r3, #2
 8001fa8:	e01c      	b.n	8001fe4 <bufferBlockPushBytes+0x1ec>
             }
             block = block->next;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	61fb      	str	r3, [r7, #28]
             index_at_nth_block = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	847b      	strh	r3, [r7, #34]	@ 0x22
     while (data_index < data_len)
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3c9      	bcc.n	8001f52 <bufferBlockPushBytes+0x15a>
         }
     }

     state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	8adb      	ldrh	r3, [r3, #22]
 8001fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd6:	b299      	uxth	r1, r3
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	8ad3      	ldrh	r3, [r2, #22]
 8001fdc:	f361 0309 	bfi	r3, r1, #0, #10
 8001fe0:	82d3      	strh	r3, [r2, #22]

     return 1;
 8001fe2:	2301      	movs	r3, #1
 }
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3728      	adds	r7, #40	@ 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	24924925 	.word	0x24924925

08001ff0 <createBufferBlock>:

 CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
 {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
     CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fa36 	bl	800246a <allocateBlock>
 8001ffe:	60f8      	str	r0, [r7, #12]
     if (block == NULL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <createBufferBlock+0x1a>
     {
         return NULL;
 8002006:	2300      	movs	r3, #0
 8002008:	e003      	b.n	8002012 <createBufferBlock+0x22>
     }
     block->next = NULL;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
     return block;
 8002010:	68fb      	ldr	r3, [r7, #12]
 }
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <copyBitArray>:
 /**
  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
  */
 void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                         uint8_t* dst, uint32_t dst_offset)
 {
 800201a:	b480      	push	{r7}
 800201c:	b089      	sub	sp, #36	@ 0x24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	603b      	str	r3, [r7, #0]
     CANARD_ASSERT(src_len > 0U);

     // Normalizing inputs
     src += src_offset / 8U;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	08db      	lsrs	r3, r3, #3
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
     dst += dst_offset / 8U;
 8002032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002034:	08db      	lsrs	r3, r3, #3
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	603b      	str	r3, [r7, #0]

     src_offset %= 8U;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60bb      	str	r3, [r7, #8]
     dst_offset %= 8U;
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28

     const size_t last_bit = src_offset + src_len;
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	61fb      	str	r3, [r7, #28]
     while (last_bit - src_offset)
 8002054:	e04d      	b.n	80020f2 <copyBitArray+0xd8>
     {
         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	76fb      	strb	r3, [r7, #27]
         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8002060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	76bb      	strb	r3, [r7, #26]

         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 800206a:	7eba      	ldrb	r2, [r7, #26]
 800206c:	7efb      	ldrb	r3, [r7, #27]
 800206e:	4293      	cmp	r3, r2
 8002070:	bf38      	it	cc
 8002072:	4613      	movcc	r3, r2
 8002074:	767b      	strb	r3, [r7, #25]
         const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8002076:	7e7b      	ldrb	r3, [r7, #25]
 8002078:	f1c3 0208 	rsb	r2, r3, #8
 800207c:	69f9      	ldr	r1, [r7, #28]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1acb      	subs	r3, r1, r3
 8002082:	4293      	cmp	r3, r2
 8002084:	bf28      	it	cs
 8002086:	4613      	movcs	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
 #else
         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 800208a:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	7ebb      	ldrb	r3, [r7, #26]
 800209a:	fa42 f303 	asr.w	r3, r2, r3
 800209e:	74fb      	strb	r3, [r7, #19]
         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	08db      	lsrs	r3, r3, #3
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	7efb      	ldrb	r3, [r7, #27]
 80020ae:	409a      	lsls	r2, r3
 80020b0:	7ebb      	ldrb	r3, [r7, #26]
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	74bb      	strb	r3, [r7, #18]

         dst[dst_offset / 8U] =
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80020b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	4013      	ands	r3, r2
 80020ca:	b2d9      	uxtb	r1, r3
 80020cc:	7cba      	ldrb	r2, [r7, #18]
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	4013      	ands	r3, r2
 80020d2:	b2da      	uxtb	r2, r3
         dst[dst_offset / 8U] =
 80020d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d6:	08db      	lsrs	r3, r3, #3
 80020d8:	6838      	ldr	r0, [r7, #0]
 80020da:	4403      	add	r3, r0
             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80020dc:	430a      	orrs	r2, r1
 80020de:	b2d2      	uxtb	r2, r2
         dst[dst_offset / 8U] =
 80020e0:	701a      	strb	r2, [r3, #0]
 #endif

         src_offset += copy_bits;
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4413      	add	r3, r2
 80020e8:	60bb      	str	r3, [r7, #8]
         dst_offset += copy_bits;
 80020ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4413      	add	r3, r2
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
     while (last_bit - src_offset)
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d1ad      	bne.n	8002056 <copyBitArray+0x3c>
     }
 }
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3724      	adds	r7, #36	@ 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <descatterTransferPayload>:

 CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                  uint32_t bit_offset,
                                                  uint8_t bit_length,
                                                  void* output)
 {
 8002108:	b580      	push	{r7, lr}
 800210a:	b090      	sub	sp, #64	@ 0x40
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	71fb      	strb	r3, [r7, #7]
     CANARD_ASSERT(transfer != 0);

     if (bit_offset >= transfer->payload_len * 8)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8a9b      	ldrh	r3, [r3, #20]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4293      	cmp	r3, r2
 8002124:	d301      	bcc.n	800212a <descatterTransferPayload+0x22>
     {
         return 0;       // Out of range, reading zero bits
 8002126:	2300      	movs	r3, #0
 8002128:	e0df      	b.n	80022ea <descatterTransferPayload+0x1e2>
     }

     if (bit_offset + bit_length > transfer->payload_len * 8)
 800212a:	79fa      	ldrb	r2, [r7, #7]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4413      	add	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	8a92      	ldrh	r2, [r2, #20]
 8002134:	00d2      	lsls	r2, r2, #3
 8002136:	4293      	cmp	r3, r2
 8002138:	d908      	bls.n	800214c <descatterTransferPayload+0x44>
     {
         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8a9b      	ldrh	r3, [r3, #20]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	71fb      	strb	r3, [r7, #7]
     }

     CANARD_ASSERT(bit_length > 0);

     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <descatterTransferPayload+0x56>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80b9 	beq.w	80022d0 <descatterTransferPayload+0x1c8>
         /*
          * This part is hideously complicated and probably should be redesigned.
          * The objective here is to copy the requested number of bits from scattered storage into the temporary
          * local storage. We go through great pains to ensure that all corner cases are handled correctly.
          */
         uint32_t input_bit_offset = bit_offset;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	637b      	str	r3, [r7, #52]	@ 0x34
         uint8_t output_bit_offset = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
         uint8_t remaining_bit_length = bit_length;
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

         // Reading head
         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 800216e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002170:	2b27      	cmp	r3, #39	@ 0x27
 8002172:	d82d      	bhi.n	80021d0 <descatterTransferPayload+0xc8>
         {
             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8002174:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217a:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 800217e:	429a      	cmp	r2, r3
 8002180:	d305      	bcc.n	800218e <descatterTransferPayload+0x86>
 8002182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e001      	b.n	8002192 <descatterTransferPayload+0x8a>
 800218e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6898      	ldr	r0, [r3, #8]
 800219a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800219e:	2300      	movs	r3, #0
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021a6:	f7ff ff38 	bl	800201a <copyBitArray>

             input_bit_offset += amount;
 80021aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021b0:	4413      	add	r3, r2
 80021b2:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80021b4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80021b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021bc:	4413      	add	r3, r2
 80021be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80021c2:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80021c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
         }

         // Reading middle
         uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8a9b      	ldrh	r3, [r3, #20]
 80021d4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80021d8:	3b05      	subs	r3, #5
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80021de:	2328      	movs	r3, #40	@ 0x28
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
         const CanardBufferBlock* block = transfer->payload_middle;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24

         while ((block != NULL) && (remaining_bit_length > 0))
 80021e8:	e044      	b.n	8002274 <descatterTransferPayload+0x16c>
         {
             CANARD_ASSERT(remaining_bits > 0);
             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	2be0      	cmp	r3, #224	@ 0xe0
 80021ee:	bf28      	it	cs
 80021f0:	23e0      	movcs	r3, #224	@ 0xe0
 80021f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021f4:	4413      	add	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
                                                                          remaining_bits);

             // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
             if (block_end_bit_offset > input_bit_offset)
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d92e      	bls.n	800225e <descatterTransferPayload+0x156>
             {
                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8002200:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002204:	69f9      	ldr	r1, [r7, #28]
 8002206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002208:	1acb      	subs	r3, r1, r3
 800220a:	429a      	cmp	r2, r3
 800220c:	d306      	bcc.n	800221c <descatterTransferPayload+0x114>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002214:	b2db      	uxtb	r3, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e001      	b.n	8002220 <descatterTransferPayload+0x118>
 800221c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002220:	76fb      	strb	r3, [r7, #27]

                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8002222:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]

                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	1d18      	adds	r0, r3, #4
 800222e:	7efa      	ldrb	r2, [r7, #27]
 8002230:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6979      	ldr	r1, [r7, #20]
 800223a:	f7ff feee 	bl	800201a <copyBitArray>

                 input_bit_offset += amount;
 800223e:	7efb      	ldrb	r3, [r7, #27]
 8002240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002242:	4413      	add	r3, r2
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8002246:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800224a:	7efb      	ldrb	r3, [r7, #27]
 800224c:	4413      	add	r3, r2
 800224e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8002252:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002256:	7efb      	ldrb	r3, [r7, #27]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
             }

             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
             remaining_bits -= block_end_bit_offset - block_bit_offset;
 800225e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002266:	4413      	add	r3, r2
 8002268:	62fb      	str	r3, [r7, #44]	@ 0x2c
             block_bit_offset = block_end_bit_offset;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	62bb      	str	r3, [r7, #40]	@ 0x28
             block = block->next;
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
         while ((block != NULL) && (remaining_bit_length > 0))
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <descatterTransferPayload+0x17a>
 800227a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1b3      	bne.n	80021ea <descatterTransferPayload+0xe2>
         }

         CANARD_ASSERT(remaining_bit_length <= remaining_bits);

         // Reading tail
         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02c      	beq.n	80022e4 <descatterTransferPayload+0x1dc>
 800228a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d028      	beq.n	80022e4 <descatterTransferPayload+0x1dc>
         {
             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
             const uint32_t offset = input_bit_offset - block_bit_offset;
 8002292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	613b      	str	r3, [r7, #16]

             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6918      	ldr	r0, [r3, #16]
 800229e:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80022a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6939      	ldr	r1, [r7, #16]
 80022ac:	f7ff feb5 	bl	800201a <copyBitArray>
                          output_bit_offset);

             input_bit_offset += remaining_bit_length;
 80022b0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80022b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022b6:	4413      	add	r3, r2
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 80022ba:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80022be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80022c2:	4413      	add	r3, r2
 80022c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             remaining_bit_length = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
     {
 80022ce:	e009      	b.n	80022e4 <descatterTransferPayload+0x1dc>
         CANARD_ASSERT(output_bit_offset <= 64);
         CANARD_ASSERT(remaining_bit_length == 0);
     }
     else                                                                    // Single frame
     {
         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6898      	ldr	r0, [r3, #8]
 80022d4:	79fa      	ldrb	r2, [r7, #7]
 80022d6:	2300      	movs	r3, #0
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	f7ff fe9c 	bl	800201a <copyBitArray>
 80022e2:	e000      	b.n	80022e6 <descatterTransferPayload+0x1de>
     {
 80022e4:	bf00      	nop
     }

     return bit_length;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	b21b      	sxth	r3, r3
 }
 80022ea:	4618      	mov	r0, r3
 80022ec:	3738      	adds	r7, #56	@ 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <isBigEndian>:

 CANARD_INTERNAL bool isBigEndian(void)
 {
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 #else
         uint16_t a;
         uint8_t b[2];
 #endif
     } u;
     u.a = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	80bb      	strh	r3, [r7, #4]
     return u.b[1] == 1;                             // Some don't...
 80022fc:	797b      	ldrb	r3, [r7, #5]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 #endif
 }
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <swapByteOrder>:

 CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
 {
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
     CANARD_ASSERT(data != NULL);

     uint8_t* const bytes = (uint8_t*) data;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

     size_t fwd = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
     size_t rev = size - 1;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3b01      	subs	r3, #1
 800232a:	613b      	str	r3, [r7, #16]

     while (fwd < rev)
 800232c:	e017      	b.n	800235e <swapByteOrder+0x4a>
     {
         const uint8_t x = bytes[fwd];
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	72fb      	strb	r3, [r7, #11]
         bytes[fwd] = bytes[rev];
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	441a      	add	r2, r3
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	440b      	add	r3, r1
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	701a      	strb	r2, [r3, #0]
         bytes[rev] = x;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	7afa      	ldrb	r2, [r7, #11]
 8002350:	701a      	strb	r2, [r3, #0]
         fwd++;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
         rev--;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	3b01      	subs	r3, #1
 800235c:	613b      	str	r3, [r7, #16]
     while (fwd < rev)
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3e3      	bcc.n	800232e <swapByteOrder+0x1a>
     }
 }
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <crcAddByte>:

 /*
  * CRC functions
  */
 CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
 {
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	460a      	mov	r2, r1
 800237e:	80fb      	strh	r3, [r7, #6]
 8002380:	4613      	mov	r3, r2
 8002382:	717b      	strb	r3, [r7, #5]
     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8002384:	797b      	ldrb	r3, [r7, #5]
 8002386:	b29b      	uxth	r3, r3
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b29a      	uxth	r2, r3
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	4053      	eors	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e012      	b.n	80023be <crcAddByte+0x4a>
     {
         if (crc_val & 0x8000U)
 8002398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da08      	bge.n	80023b2 <crcAddByte+0x3e>
         {
             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	80fb      	strh	r3, [r7, #6]
 80023b0:	e002      	b.n	80023b8 <crcAddByte+0x44>
         }
         else
         {
             crc_val = (uint16_t) (crc_val << 1U);
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	80fb      	strh	r3, [r7, #6]
     for (uint8_t j = 0; j < 8; j++)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	3301      	adds	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b07      	cmp	r3, #7
 80023c2:	d9e9      	bls.n	8002398 <crcAddByte+0x24>
         }
     }
     return crc_val;
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 }
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <crcAddSignature>:

 CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
 {
 80023d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d4:	b087      	sub	sp, #28
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4601      	mov	r1, r0
 80023da:	e9c7 2300 	strd	r2, r3, [r7]
 80023de:	460b      	mov	r3, r1
 80023e0:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80023e2:	2300      	movs	r3, #0
 80023e4:	82fb      	strh	r3, [r7, #22]
 80023e6:	e01b      	b.n	8002420 <crcAddSignature+0x4e>
     {
         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80023e8:	8af9      	ldrh	r1, [r7, #22]
 80023ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ee:	f1c1 0620 	rsb	r6, r1, #32
 80023f2:	f1a1 0020 	sub.w	r0, r1, #32
 80023f6:	fa22 f401 	lsr.w	r4, r2, r1
 80023fa:	fa03 f606 	lsl.w	r6, r3, r6
 80023fe:	4334      	orrs	r4, r6
 8002400:	fa23 f000 	lsr.w	r0, r3, r0
 8002404:	4304      	orrs	r4, r0
 8002406:	fa23 f501 	lsr.w	r5, r3, r1
 800240a:	b2e2      	uxtb	r2, r4
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ffaf 	bl	8002374 <crcAddByte>
 8002416:	4603      	mov	r3, r0
 8002418:	81fb      	strh	r3, [r7, #14]
     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800241a:	8afb      	ldrh	r3, [r7, #22]
 800241c:	3308      	adds	r3, #8
 800241e:	82fb      	strh	r3, [r7, #22]
 8002420:	8afb      	ldrh	r3, [r7, #22]
 8002422:	2b3f      	cmp	r3, #63	@ 0x3f
 8002424:	d9e0      	bls.n	80023e8 <crcAddSignature+0x16>
     }
     return crc_val;
 8002426:	89fb      	ldrh	r3, [r7, #14]
 }
 8002428:	4618      	mov	r0, r3
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002430 <crcAdd>:

 CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
 {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	81fb      	strh	r3, [r7, #14]
     while (len--)
 800243e:	e00a      	b.n	8002456 <crcAdd+0x26>
     {
         crc_val = crcAddByte(crc_val, *bytes++);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff91 	bl	8002374 <crcAddByte>
 8002452:	4603      	mov	r3, r0
 8002454:	81fb      	strh	r3, [r7, #14]
     while (len--)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ef      	bne.n	8002440 <crcAdd+0x10>
     }
     return crc_val;
 8002460:	89fb      	ldrh	r3, [r7, #14]
 }
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <allocateBlock>:
     // or at first call of canard_allocate_sem_take
     allocator->semaphore = NULL;
 }

 CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
 {
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     // Check if there are any blocks available in the free list.
     if (allocator->free_list == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <allocateBlock+0x14>
     {
 #if CANARD_ALLOCATE_SEM
         canard_allocate_sem_give(allocator);
 #endif
         return NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	e018      	b.n	80024b0 <allocateBlock+0x46>
     }

     // Take first available block and prepares next block for use.
     void* result = allocator->free_list;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]
     allocator->free_list = allocator->free_list->next;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]

     // Update statistics
     allocator->statistics.current_usage_blocks++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	895b      	ldrh	r3, [r3, #10]
 8002492:	3301      	adds	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	815a      	strh	r2, [r3, #10]
     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	899a      	ldrh	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	895b      	ldrh	r3, [r3, #10]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d203      	bcs.n	80024ae <allocateBlock+0x44>
     {
         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	895a      	ldrh	r2, [r3, #10]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	819a      	strh	r2, [r3, #12]
     }
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
     return result;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 }
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <freeBlock>:

 CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
 {
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_take(allocator);
 #endif
     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	60fb      	str	r3, [r7, #12]

     block->next = allocator->free_list;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	601a      	str	r2, [r3, #0]
     allocator->free_list = block;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]

     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
     allocator->statistics.current_usage_blocks--;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	895b      	ldrh	r3, [r3, #10]
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	815a      	strh	r2, [r3, #10]
 #if CANARD_ALLOCATE_SEM
     canard_allocate_sem_give(allocator);
 #endif
 }
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <receive_can>:
  CanardInstance canard;
  CanardTxQueueItem* tx_queue = NULL;

  uint8_t node_status_transfer_id = 0;

  bool receive_can(CanardInstance* ins, uint64_t timestamp_usec) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0a4      	sub	sp, #144	@ 0x90
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	e9c7 2300 	strd	r2, r3, [r7]
      FDCAN_RxHeaderTypeDef rx_header;
      uint8_t rx_data[64];

      if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK) {
 80024fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002500:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002504:	2140      	movs	r1, #64	@ 0x40
 8002506:	4816      	ldr	r0, [pc, #88]	@ (8002560 <receive_can+0x70>)
 8002508:	f001 fa46 	bl	8003998 <HAL_FDCAN_GetRxMessage>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <receive_can+0x26>
          return false;
 8002512:	2300      	movs	r3, #0
 8002514:	e01f      	b.n	8002556 <receive_can+0x66>
      }

      CanardCANFrame frame;
      frame.id = rx_header.Identifier;
 8002516:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002518:	617b      	str	r3, [r7, #20]
      frame.data_len = (rx_header.DataLength >> 16);
 800251a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f887 3020 	strb.w	r3, [r7, #32]
      memcpy(frame.data, rx_data, 64);
 8002524:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	3304      	adds	r3, #4
 800252e:	2240      	movs	r2, #64	@ 0x40
 8002530:	4618      	mov	r0, r3
 8002532:	f004 f907 	bl	8006744 <memcpy>

      const int16_t result = canardHandleRxFrame(ins, &frame, timestamp_usec);
 8002536:	f107 0114 	add.w	r1, r7, #20
 800253a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f7fe fadc 	bl	8000afc <canardHandleRxFrame>
 8002544:	4603      	mov	r3, r0
 8002546:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

      return result >= 0;
 800254a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800254e:	43db      	mvns	r3, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	0bdb      	lsrs	r3, r3, #15
 8002554:	b2db      	uxtb	r3, r3
  }
 8002556:	4618      	mov	r0, r3
 8002558:	3790      	adds	r7, #144	@ 0x90
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000070 	.word	0x20000070

08002564 <send_canard_frame>:

  void send_canard_frame(CanardInstance* ins, const CanardCANFrame* item) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	@ 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
      if (item == NULL) return;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <send_canard_frame+0x52>

      FDCAN_TxHeaderTypeDef tx_header = {0};
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2224      	movs	r2, #36	@ 0x24
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f004 f8b4 	bl	80066ea <memset>

//      tx_header.Identifier = ;
      tx_header.IdType = FDCAN_EXTENDED_ID;
 8002582:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002586:	613b      	str	r3, [r7, #16]
      tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
      tx_header.DataLength = 64; // HAL macro: length in 4-bit encoded
 800258c:	2340      	movs	r3, #64	@ 0x40
 800258e:	61bb      	str	r3, [r7, #24]
      tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
      tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
      tx_header.FDFormat = FDCAN_CLASSIC_CAN; // Use FDCAN_FD_CAN if using CAN-FD
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
      tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800259c:	2300      	movs	r3, #0
 800259e:	62bb      	str	r3, [r7, #40]	@ 0x28
      tx_header.MessageMarker = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

      // Push the message to the TX FIFO queue
      if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, (uint8_t*)item->data) != HAL_OK) {
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	4619      	mov	r1, r3
 80025ae:	4804      	ldr	r0, [pc, #16]	@ (80025c0 <send_canard_frame+0x5c>)
 80025b0:	f001 f9ae 	bl	8003910 <HAL_FDCAN_AddMessageToTxFifoQ>
 80025b4:	e000      	b.n	80025b8 <send_canard_frame+0x54>
      if (item == NULL) return;
 80025b6:	bf00      	nop
          // Transmission failed; optionally log or handle this
      }
  }
 80025b8:	3730      	adds	r7, #48	@ 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000070 	.word	0x20000070

080025c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	b095      	sub	sp, #84	@ 0x54
 80025c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ca:	f000 fe41 	bl	8003250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ce:	f000 f89f 	bl	8002710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d2:	f000 f949 	bl	8002868 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80025d6:	f000 f933 	bl	8002840 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 80025da:	f000 f8eb 	bl	80027b4 <MX_FDCAN1_Init>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 fb8e 	bl	8002d00 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f000 fb8b 	bl	8002d00 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80025ea:	2002      	movs	r0, #2
 80025ec:	f000 fb88 	bl	8002d00 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80025f0:	2101      	movs	r1, #1
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 fbe2 	bl	8002dbc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80025f8:	4b40      	ldr	r3, [pc, #256]	@ (80026fc <main+0x138>)
 80025fa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025fe:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8002600:	4b3e      	ldr	r3, [pc, #248]	@ (80026fc <main+0x138>)
 8002602:	2200      	movs	r2, #0
 8002604:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <main+0x138>)
 8002608:	2200      	movs	r2, #0
 800260a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800260c:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <main+0x138>)
 800260e:	2200      	movs	r2, #0
 8002610:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8002612:	4b3a      	ldr	r3, [pc, #232]	@ (80026fc <main+0x138>)
 8002614:	2200      	movs	r2, #0
 8002616:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8002618:	4938      	ldr	r1, [pc, #224]	@ (80026fc <main+0x138>)
 800261a:	2000      	movs	r0, #0
 800261c:	f000 fc8a 	bl	8002f34 <BSP_COM_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <main+0x66>
  {
    Error_Handler();
 8002626:	f000 f9c1 	bl	80029ac <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  request_node_id();
 800262a:	f000 f989 	bl	8002940 <request_node_id>

  while (1)
  {
	  const uint32_t now_ms = HAL_GetTick();
 800262e:	f000 fe79 	bl	8003324 <HAL_GetTick>
 8002632:	63b8      	str	r0, [r7, #56]	@ 0x38

	  CanardRxTransfer transfer;
	  if (receive_can(&canard, &transfer)) {
 8002634:	463b      	mov	r3, r7
 8002636:	17da      	asrs	r2, r3, #31
 8002638:	461c      	mov	r4, r3
 800263a:	4615      	mov	r5, r2
 800263c:	4622      	mov	r2, r4
 800263e:	462b      	mov	r3, r5
 8002640:	482f      	ldr	r0, [pc, #188]	@ (8002700 <main+0x13c>)
 8002642:	f7ff ff55 	bl	80024f0 <receive_can>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d032      	beq.n	80026b2 <main+0xee>
		  if (transfer.data_type_id == UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID) {
 800264c:	8afb      	ldrh	r3, [r7, #22]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d12f      	bne.n	80026b2 <main+0xee>
			  struct uavcan_protocol_dynamic_node_id_Allocation req;
			  bool success = uavcan_protocol_dynamic_node_id_Allocation_decode(&transfer, &req);
 8002652:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002656:	463b      	mov	r3, r7
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe f8f0 	bl	8000840 <uavcan_protocol_dynamic_node_id_Allocation_decode>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (success && memcmp(req.unique_id, unique_id, 16) == 0) {
 8002666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800266a:	2b00      	cmp	r3, #0
 800266c:	d021      	beq.n	80026b2 <main+0xee>
 800266e:	2310      	movs	r3, #16
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <main+0x140>)
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	f8d7 3026 	ldr.w	r3, [r7, #38]	@ 0x26
 800267a:	4618      	mov	r0, r3
 800267c:	f8d7 302a 	ldr.w	r3, [r7, #42]	@ 0x2a
 8002680:	4619      	mov	r1, r3
 8002682:	f8d7 302e 	ldr.w	r3, [r7, #46]	@ 0x2e
 8002686:	461a      	mov	r2, r3
 8002688:	f8d7 3032 	ldr.w	r3, [r7, #50]	@ 0x32
 800268c:	461e      	mov	r6, r3
 800268e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002692:	f88d 3000 	strb.w	r3, [sp]
 8002696:	4633      	mov	r3, r6
 8002698:	f004 f817 	bl	80066ca <memcmp>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <main+0xee>
				  node_id = req.node_id;
 80026a2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80026a6:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <main+0x144>)
 80026a8:	701a      	strb	r2, [r3, #0]
				  canard.node_id = node_id;
 80026aa:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <main+0x144>)
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <main+0x13c>)
 80026b0:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  if (now_ms - last_status_ms > 1000 && node_id != 0) {
 80026b2:	4b16      	ldr	r3, [pc, #88]	@ (800270c <main+0x148>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026be:	d908      	bls.n	80026d2 <main+0x10e>
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <main+0x144>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <main+0x10e>
		  send_node_status();
 80026c8:	f000 f8fe 	bl	80028c8 <send_node_status>
		  last_status_ms = now_ms;
 80026cc:	4a0f      	ldr	r2, [pc, #60]	@ (800270c <main+0x148>)
 80026ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d0:	6013      	str	r3, [r2, #0]
	  }

	  CanardCANFrame* item = canardPeekTxQueue(&canard);
 80026d2:	480b      	ldr	r0, [pc, #44]	@ (8002700 <main+0x13c>)
 80026d4:	f7fe f9ea 	bl	8000aac <canardPeekTxQueue>
 80026d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  while (item) {
 80026da:	e00a      	b.n	80026f2 <main+0x12e>
		  send_canard_frame(&canard, item);  // implement this to call HAL_FDCAN_AddMessageToTxFifoQ
 80026dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026de:	4808      	ldr	r0, [pc, #32]	@ (8002700 <main+0x13c>)
 80026e0:	f7ff ff40 	bl	8002564 <send_canard_frame>
		  canardPopTxQueue(&canard);
 80026e4:	4806      	ldr	r0, [pc, #24]	@ (8002700 <main+0x13c>)
 80026e6:	f7fe f9f4 	bl	8000ad2 <canardPopTxQueue>
		  item = canardPeekTxQueue(&canard);
 80026ea:	4805      	ldr	r0, [pc, #20]	@ (8002700 <main+0x13c>)
 80026ec:	f7fe f9de 	bl	8000aac <canardPeekTxQueue>
 80026f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  while (item) {
 80026f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f1      	bne.n	80026dc <main+0x118>
  {
 80026f8:	e799      	b.n	800262e <main+0x6a>
 80026fa:	bf00      	nop
 80026fc:	20000060 	.word	0x20000060
 8002700:	200000e0 	.word	0x200000e0
 8002704:	20000000 	.word	0x20000000
 8002708:	200000d4 	.word	0x200000d4
 800270c:	200000d8 	.word	0x200000d8

08002710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b098      	sub	sp, #96	@ 0x60
 8002714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002716:	f107 0318 	add.w	r3, r7, #24
 800271a:	2248      	movs	r2, #72	@ 0x48
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f003 ffe3 	bl	80066ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8002732:	2000      	movs	r0, #0
 8002734:	f001 fce0 	bl	80040f8 <HAL_PWREx_ControlVoltageScaling>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800273e:	f000 f935 	bl	80029ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002742:	2310      	movs	r3, #16
 8002744:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002746:	2301      	movs	r3, #1
 8002748:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800274a:	2300      	movs	r3, #0
 800274c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800274e:	2360      	movs	r3, #96	@ 0x60
 8002750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002752:	2302      	movs	r3, #2
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002756:	2301      	movs	r3, #1
 8002758:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800275e:	2337      	movs	r3, #55	@ 0x37
 8002760:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002762:	2307      	movs	r3, #7
 8002764:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002766:	2302      	movs	r3, #2
 8002768:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800276a:	2302      	movs	r3, #2
 800276c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800276e:	f107 0318 	add.w	r3, r7, #24
 8002772:	4618      	mov	r0, r3
 8002774:	f001 fd60 	bl	8004238 <HAL_RCC_OscConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800277e:	f000 f915 	bl	80029ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002782:	230f      	movs	r3, #15
 8002784:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002786:	2303      	movs	r3, #3
 8002788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2105      	movs	r1, #5
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fa22 	bl	8004be4 <HAL_RCC_ClockConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80027a6:	f000 f901 	bl	80029ac <Error_Handler>
  }
}
 80027aa:	bf00      	nop
 80027ac:	3760      	adds	r7, #96	@ 0x60
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80027b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027ba:	4a20      	ldr	r2, [pc, #128]	@ (800283c <MX_FDCAN1_Init+0x88>)
 80027bc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80027be:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80027c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80027d0:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80027d6:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027d8:	2200      	movs	r2, #0
 80027da:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80027dc:	4b16      	ldr	r3, [pc, #88]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027de:	2200      	movs	r2, #0
 80027e0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027e4:	2210      	movs	r2, #16
 80027e6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80027ee:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80027f4:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80027fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002800:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 8002802:	2201      	movs	r2, #1
 8002804:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002806:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 8002808:	2201      	movs	r2, #1
 800280a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 800280e:	2201      	movs	r2, #1
 8002810:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 8002814:	2200      	movs	r2, #0
 8002816:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002818:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 800281a:	2200      	movs	r2, #0
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 8002820:	2200      	movs	r2, #0
 8002822:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002824:	4804      	ldr	r0, [pc, #16]	@ (8002838 <MX_FDCAN1_Init+0x84>)
 8002826:	f000 ff21 	bl	800366c <HAL_FDCAN_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8002830:	f000 f8bc 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000070 	.word	0x20000070
 800283c:	4000a400 	.word	0x4000a400

08002840 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8002844:	2000      	movs	r0, #0
 8002846:	f001 fc19 	bl	800407c <HAL_ICACHE_ConfigAssociativityMode>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8002850:	f000 f8ac 	bl	80029ac <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002854:	f001 fc32 	bl	80040bc <HAL_ICACHE_Enable>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800285e:	f000 f8a5 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288a:	4a0e      	ldr	r2, [pc, #56]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002892:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_GPIO_Init+0x5c>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000

080028c8 <send_node_status>:

/* USER CODE BEGIN 4 */


void send_node_status(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	@ 0x30
 80028cc:	af06      	add	r7, sp, #24
    struct uavcan_protocol_NodeStatus msg;
    msg.uptime_sec = uptime++;
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <send_node_status+0x6c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4917      	ldr	r1, [pc, #92]	@ (8002934 <send_node_status+0x6c>)
 80028d6:	600a      	str	r2, [r1, #0]
 80028d8:	60bb      	str	r3, [r7, #8]
    msg.health = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	733b      	strb	r3, [r7, #12]
    msg.mode = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	737b      	strb	r3, [r7, #13]
    msg.sub_mode = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73bb      	strb	r3, [r7, #14]
    msg.vendor_specific_status_code = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	823b      	strh	r3, [r7, #16]

    uint8_t buffer[UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE];
    const int size = uavcan_protocol_NodeStatus_encode(&msg, buffer);
 80028ea:	463a      	mov	r2, r7
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fea9 	bl	800064a <uavcan_protocol_NodeStatus_encode>
 80028f8:	4603      	mov	r3, r0
 80028fa:	617b      	str	r3, [r7, #20]

    canardBroadcast(
 80028fc:	463b      	mov	r3, r7
 80028fe:	b2db      	uxtb	r3, r3
        &canard,                                 // Canard instance
        CanardTransferTypeBroadcast,             // Type: Broadcast
        UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE,    // Signature
        UAVCAN_PROTOCOL_NODESTATUS_ID,           // Data Type ID
        buffer,                                  // Encoded payload
        (uint16_t)size,                          // Payload length
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	b292      	uxth	r2, r2
    canardBroadcast(
 8002904:	4611      	mov	r1, r2
 8002906:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <send_node_status+0x70>)
 8002908:	b292      	uxth	r2, r2
 800290a:	9204      	str	r2, [sp, #16]
 800290c:	9103      	str	r1, [sp, #12]
 800290e:	9302      	str	r3, [sp, #8]
 8002910:	f240 1355 	movw	r3, #341	@ 0x155
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	f24c 63f1 	movw	r3, #50929	@ 0xc6f1
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f04f 0202 	mov.w	r2, #2
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	4805      	ldr	r0, [pc, #20]	@ (800293c <send_node_status+0x74>)
 8002926:	f7fd ffbb 	bl	80008a0 <canardBroadcast>
        &node_status_transfer_id                 // Transfer ID (incremented automatically)
    );
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200000dc 	.word	0x200000dc
 8002938:	2000010c 	.word	0x2000010c
 800293c:	200000e0 	.word	0x200000e0

08002940 <request_node_id>:


void request_node_id(void) {
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b092      	sub	sp, #72	@ 0x48
 8002944:	af06      	add	r7, sp, #24
	struct uavcan_protocol_dynamic_node_id_Allocation req;
    req.node_id = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	763b      	strb	r3, [r7, #24]
    req.first_part_of_unique_id = true;
 800294a:	2301      	movs	r3, #1
 800294c:	767b      	strb	r3, [r7, #25]
    req.unique_id.len = 16;
 800294e:	2310      	movs	r3, #16
 8002950:	76bb      	strb	r3, [r7, #26]
    memcpy(req.unique_id.data, unique_id, 16);
 8002952:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <request_node_id+0x64>)
 8002954:	f107 041b 	add.w	r4, r7, #27
 8002958:	461d      	mov	r5, r3
 800295a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800295c:	6020      	str	r0, [r4, #0]
 800295e:	6061      	str	r1, [r4, #4]
 8002960:	60a2      	str	r2, [r4, #8]
 8002962:	60e3      	str	r3, [r4, #12]


    uint8_t buffer[UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE];
    const int size = uavcan_protocol_dynamic_node_id_Allocation_encode(&req, buffer);
 8002964:	1d3a      	adds	r2, r7, #4
 8002966:	f107 0318 	add.w	r3, r7, #24
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd ff4d 	bl	800080c <uavcan_protocol_dynamic_node_id_Allocation_encode>
 8002972:	4603      	mov	r3, r0
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    canardBroadcast(&canard,
 8002976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002978:	b29b      	uxth	r3, r3
 800297a:	9304      	str	r3, [sp, #16]
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	9303      	str	r3, [sp, #12]
 8002980:	2300      	movs	r3, #0
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	2301      	movs	r3, #1
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	f44f 53ea 	mov.w	r3, #7488	@ 0x1d40
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f04f 0202 	mov.w	r2, #2
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	4804      	ldr	r0, [pc, #16]	@ (80029a8 <request_node_id+0x68>)
 8002998:	f7fd ff82 	bl	80008a0 <canardBroadcast>
    	    UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID,
    	    0,
			buffer,
    	    (uint16_t)size
    	    );
}
 800299c:	bf00      	nop
 800299e:	3730      	adds	r7, #48	@ 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bdb0      	pop	{r4, r5, r7, pc}
 80029a4:	20000000 	.word	0x20000000
 80029a8:	200000e0 	.word	0x200000e0

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <Error_Handler+0x8>

080029b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b0f      	ldr	r3, [pc, #60]	@ (80029fc <HAL_MspInit+0x44>)
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	4a0e      	ldr	r2, [pc, #56]	@ (80029fc <HAL_MspInit+0x44>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80029ca:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_MspInit+0x44>)
 80029cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_MspInit+0x44>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_MspInit+0x44>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_MspInit+0x44>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029ee:	f001 fbef 	bl	80041d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ae      	sub	sp, #184	@ 0xb8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	2294      	movs	r2, #148	@ 0x94
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fe62 	bl	80066ea <memset>
  if(hfdcan->Instance==FDCAN1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a22      	ldr	r2, [pc, #136]	@ (8002ab4 <HAL_FDCAN_MspInit+0xb4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d13d      	bne.n	8002aac <HAL_FDCAN_MspInit+0xac>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002a36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fbb3 	bl	80051ac <HAL_RCCEx_PeriphCLKConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002a4c:	f7ff ffae 	bl	80029ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_FDCAN_MspInit+0xb8>)
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	4a18      	ldr	r2, [pc, #96]	@ (8002ab8 <HAL_FDCAN_MspInit+0xb8>)
 8002a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a5a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002a5c:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <HAL_FDCAN_MspInit+0xb8>)
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_FDCAN_MspInit+0xb8>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6c:	4a12      	ldr	r2, [pc, #72]	@ (8002ab8 <HAL_FDCAN_MspInit+0xb8>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a74:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_FDCAN_MspInit+0xb8>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a9a:	2309      	movs	r3, #9
 8002a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4805      	ldr	r0, [pc, #20]	@ (8002abc <HAL_FDCAN_MspInit+0xbc>)
 8002aa8:	f001 f950 	bl	8003d4c <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002aac:	bf00      	nop
 8002aae:	37b8      	adds	r7, #184	@ 0xb8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	4000a400 	.word	0x4000a400
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	42020000 	.word	0x42020000

08002ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <NMI_Handler+0x4>

08002ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b16:	f000 fbf1 	bl	80032fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 f9f0 	bl	8002f08 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <SystemInit+0x20>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <SystemInit+0x20>)
 8002b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8002b56:	4b4f      	ldr	r3, [pc, #316]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8002b62:	4b4c      	ldr	r3, [pc, #304]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e005      	b.n	8002b7e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8002b72:	4b48      	ldr	r3, [pc, #288]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8002b7e:	4a46      	ldr	r2, [pc, #280]	@ (8002c98 <SystemCoreClockUpdate+0x148>)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b88:	4b42      	ldr	r3, [pc, #264]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d866      	bhi.n	8002c62 <SystemCoreClockUpdate+0x112>
 8002b94:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <SystemCoreClockUpdate+0x4c>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bd1 	.word	0x08002bd1
 8002ba0:	08002c63 	.word	0x08002c63
 8002ba4:	08002c63 	.word	0x08002c63
 8002ba8:	08002c63 	.word	0x08002c63
 8002bac:	08002bd9 	.word	0x08002bd9
 8002bb0:	08002c63 	.word	0x08002c63
 8002bb4:	08002c63 	.word	0x08002c63
 8002bb8:	08002c63 	.word	0x08002c63
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002c63 	.word	0x08002c63
 8002bc4:	08002c63 	.word	0x08002c63
 8002bc8:	08002c63 	.word	0x08002c63
 8002bcc:	08002be9 	.word	0x08002be9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002bd0:	4a32      	ldr	r2, [pc, #200]	@ (8002c9c <SystemCoreClockUpdate+0x14c>)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6013      	str	r3, [r2, #0]
      break;
 8002bd6:	e048      	b.n	8002c6a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002bd8:	4b30      	ldr	r3, [pc, #192]	@ (8002c9c <SystemCoreClockUpdate+0x14c>)
 8002bda:	4a31      	ldr	r2, [pc, #196]	@ (8002ca0 <SystemCoreClockUpdate+0x150>)
 8002bdc:	601a      	str	r2, [r3, #0]
      break;
 8002bde:	e044      	b.n	8002c6a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002be0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c9c <SystemCoreClockUpdate+0x14c>)
 8002be2:	4a30      	ldr	r2, [pc, #192]	@ (8002ca4 <SystemCoreClockUpdate+0x154>)
 8002be4:	601a      	str	r2, [r3, #0]
      break;
 8002be6:	e040      	b.n	8002c6a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002be8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d003      	beq.n	8002c0e <SystemCoreClockUpdate+0xbe>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d006      	beq.n	8002c1a <SystemCoreClockUpdate+0xca>
 8002c0c:	e00b      	b.n	8002c26 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002c0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ca0 <SystemCoreClockUpdate+0x150>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	613b      	str	r3, [r7, #16]
          break;
 8002c18:	e00b      	b.n	8002c32 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002c1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ca4 <SystemCoreClockUpdate+0x154>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	613b      	str	r3, [r7, #16]
          break;
 8002c24:	e005      	b.n	8002c32 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	613b      	str	r3, [r7, #16]
          break;
 8002c30:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002c32:	4b18      	ldr	r3, [pc, #96]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002c44:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0e5b      	lsrs	r3, r3, #25
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <SystemCoreClockUpdate+0x14c>)
 8002c5e:	6013      	str	r3, [r2, #0]
      break;
 8002c60:	e003      	b.n	8002c6a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002c62:	4a0e      	ldr	r2, [pc, #56]	@ (8002c9c <SystemCoreClockUpdate+0x14c>)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	6013      	str	r3, [r2, #0]
      break;
 8002c68:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <SystemCoreClockUpdate+0x144>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca8 <SystemCoreClockUpdate+0x158>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <SystemCoreClockUpdate+0x14c>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <SystemCoreClockUpdate+0x14c>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40021000 	.word	0x40021000
 8002c98:	080067c0 	.word	0x080067c0
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	080067a8 	.word	0x080067a8

08002cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cb0:	f7ff ff3c 	bl	8002b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cb6:	e003      	b.n	8002cc0 <LoopCopyDataInit>

08002cb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cbe:	3104      	adds	r1, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002cc0:	480a      	ldr	r0, [pc, #40]	@ (8002cec <LoopForever+0xa>)
	ldr	r3, =_edata
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002cc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002cc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002cc8:	d3f6      	bcc.n	8002cb8 <CopyDataInit>
	ldr	r2, =_sbss
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ccc:	e002      	b.n	8002cd4 <LoopFillZerobss>

08002cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002cce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002cd0:	f842 3b04 	str.w	r3, [r2], #4

08002cd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002cd4:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <LoopForever+0x16>)
	cmp	r2, r3
 8002cd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002cd8:	d3f9      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cda:	f003 fd0f 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cde:	f7ff fc71 	bl	80025c4 <main>

08002ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ce2:	e7fe      	b.n	8002ce2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002ce4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002ce8:	08006838 	.word	0x08006838
	ldr	r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002cf0:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8002cf4:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 8002cf8:	20000248 	.word	0x20000248

08002cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC1_2_IRQHandler>
	...

08002d00 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8002d10:	4b27      	ldr	r3, [pc, #156]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d1c:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	e01b      	b.n	8002d62 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10c      	bne.n	8002d4a <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8002d30:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d34:	4a1e      	ldr	r2, [pc, #120]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	e00b      	b.n	8002d62 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8002d4a:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d56:	4b16      	ldr	r3, [pc, #88]	@ (8002db0 <BSP_LED_Init+0xb0>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	4a13      	ldr	r2, [pc, #76]	@ (8002db4 <BSP_LED_Init+0xb4>)
 8002d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d6a:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002db8 <BSP_LED_Init+0xb8>)
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	f107 0214 	add.w	r2, r7, #20
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 ffe0 	bl	8003d4c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <BSP_LED_Init+0xb8>)
 8002d90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4a07      	ldr	r2, [pc, #28]	@ (8002db4 <BSP_LED_Init+0xb4>)
 8002d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f001 f954 	bl	800404c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3728      	adds	r7, #40	@ 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	20000014 	.word	0x20000014
 8002db8:	2000001c 	.word	0x2000001c

08002dbc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	@ 0x30
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	71fb      	strb	r3, [r7, #7]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <BSP_PB_Init+0x118>)
 8002dd6:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8002dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed8 <BSP_PB_Init+0x11c>)
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8002edc <BSP_PB_Init+0x120>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de0:	4a3e      	ldr	r2, [pc, #248]	@ (8002edc <BSP_PB_Init+0x120>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de8:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <BSP_PB_Init+0x120>)
 8002dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee0 <BSP_PB_Init+0x124>)
 8002df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfc:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e02:	2302      	movs	r3, #2
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	4a34      	ldr	r2, [pc, #208]	@ (8002ee4 <BSP_PB_Init+0x128>)
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	f107 0218 	add.w	r2, r7, #24
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 ff94 	bl	8003d4c <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002e24:	79bb      	ldrb	r3, [r7, #6]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d14f      	bne.n	8002eca <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8002e2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee4 <BSP_PB_Init+0x128>)
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	f107 0218 	add.w	r2, r7, #24
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 ff84 	bl	8003d4c <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8002e44:	79fa      	ldrb	r2, [r7, #7]
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4a26      	ldr	r2, [pc, #152]	@ (8002ee8 <BSP_PB_Init+0x12c>)
 8002e50:	441a      	add	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	3330      	adds	r3, #48	@ 0x30
 8002e58:	443b      	add	r3, r7
 8002e5a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f000 fba6 	bl	80035b2 <HAL_EXTI_GetHandle>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d12b      	bne.n	8002ec4 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <BSP_PB_Init+0x12c>)
 8002e78:	1898      	adds	r0, r3, r2
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3330      	adds	r3, #48	@ 0x30
 8002e80:	443b      	add	r3, r7
 8002e82:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002e86:	461a      	mov	r2, r3
 8002e88:	2101      	movs	r1, #1
 8002e8a:	f000 fb66 	bl	800355a <HAL_EXTI_RegisterCallback>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d113      	bne.n	8002ebc <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <BSP_PB_Init+0x130>)
 8002e98:	56d0      	ldrsb	r0, [r2, r3]
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3330      	adds	r3, #48	@ 0x30
 8002ea0:	443b      	add	r3, r7
 8002ea2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f000 fb22 	bl	80034f2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002eec <BSP_PB_Init+0x130>)
 8002eb2:	56d3      	ldrsb	r3, [r2, r3]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fb36 	bl	8003526 <HAL_NVIC_EnableIRQ>
 8002eba:	e006      	b.n	8002eca <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8002ebc:	f06f 0303 	mvn.w	r3, #3
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec2:	e002      	b.n	8002eca <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8002ec4:	f06f 0303 	mvn.w	r3, #3
 8002ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8002eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3730      	adds	r7, #48	@ 0x30
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	0600000d 	.word	0x0600000d
 8002ed8:	080030a1 	.word	0x080030a1
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	20000028 	.word	0x20000028
 8002ee4:	2000002c 	.word	0x2000002c
 8002ee8:	20000238 	.word	0x20000238
 8002eec:	20000030 	.word	0x20000030

08002ef0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002f12:	79fa      	ldrb	r2, [r7, #7]
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4a04      	ldr	r2, [pc, #16]	@ (8002f30 <BSP_PB_IRQHandler+0x28>)
 8002f1e:	4413      	add	r3, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fb5b 	bl	80035dc <HAL_EXTI_IRQHandler>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000238 	.word	0x20000238

08002f34 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d103      	bne.n	8002f52 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8002f4a:	f06f 0301 	mvn.w	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e03a      	b.n	8002fc8 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8002f52:	79fa      	ldrb	r2, [r7, #7]
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	491f      	ldr	r1, [pc, #124]	@ (8002fd4 <BSP_COM_Init+0xa0>)
 8002f58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002f5c:	491e      	ldr	r1, [pc, #120]	@ (8002fd8 <BSP_COM_Init+0xa4>)
 8002f5e:	2094      	movs	r0, #148	@ 0x94
 8002f60:	fb00 f303 	mul.w	r3, r0, r3
 8002f64:	440b      	add	r3, r1
 8002f66:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	2294      	movs	r2, #148	@ 0x94
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	4a19      	ldr	r2, [pc, #100]	@ (8002fd8 <BSP_COM_Init+0xa4>)
 8002f72:	4413      	add	r3, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f89b 	bl	80030b0 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d123      	bne.n	8002fc8 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d110      	bne.n	8002fa8 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2294      	movs	r2, #148	@ 0x94
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <BSP_COM_Init+0xa4>)
 8002f90:	4413      	add	r3, r2
 8002f92:	6839      	ldr	r1, [r7, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f821 	bl	8002fdc <MX_LPUART1_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8002fa0:	f06f 0303 	mvn.w	r3, #3
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e00f      	b.n	8002fc8 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	2294      	movs	r2, #148	@ 0x94
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	4a09      	ldr	r2, [pc, #36]	@ (8002fd8 <BSP_COM_Init+0xa4>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f841 	bl	800303e <MX_USART3_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8002fc2:	f06f 0303 	mvn.w	r3, #3
 8002fc6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000034 	.word	0x20000034
 8002fd8:	20000110 	.word	0x20000110

08002fdc <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	891b      	ldrh	r3, [r3, #8]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	895b      	ldrh	r3, [r3, #10]
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	220c      	movs	r2, #12
 800300e:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	899b      	ldrh	r3, [r3, #12]
 8003014:	461a      	mov	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003020:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f002 fdd2 	bl	8005bd8 <HAL_UART_Init>
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	891b      	ldrh	r3, [r3, #8]
 800305c:	461a      	mov	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	895b      	ldrh	r3, [r3, #10]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	220c      	movs	r2, #12
 8003070:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	899b      	ldrh	r3, [r3, #12]
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003082:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f002 fda1 	bl	8005bd8 <HAL_UART_Init>
 8003096:	4603      	mov	r3, r0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7ff ff23 	bl	8002ef0 <BSP_PB_Callback>
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b098      	sub	sp, #96	@ 0x60
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 80030b8:	4a60      	ldr	r2, [pc, #384]	@ (800323c <UART_MspInit+0x18c>)
 80030ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c2:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 80030c6:	4a5d      	ldr	r2, [pc, #372]	@ (800323c <UART_MspInit+0x18c>)
 80030c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030d0:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 80030d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003240 <UART_MspInit+0x190>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 80030da:	4b5a      	ldr	r3, [pc, #360]	@ (8003244 <UART_MspInit+0x194>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 80030e0:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80030e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 80030e6:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80030ea:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a55      	ldr	r2, [pc, #340]	@ (8003248 <UART_MspInit+0x198>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8003100:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003104:	2b00      	cmp	r3, #0
 8003106:	d132      	bne.n	800316e <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b50      	ldr	r3, [pc, #320]	@ (800324c <UART_MspInit+0x19c>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	4a4f      	ldr	r2, [pc, #316]	@ (800324c <UART_MspInit+0x19c>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	@ 0x58
 8003114:	4b4d      	ldr	r3, [pc, #308]	@ (800324c <UART_MspInit+0x19c>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8003120:	f001 f846 	bl	80041b0 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8003124:	4b49      	ldr	r3, [pc, #292]	@ (800324c <UART_MspInit+0x19c>)
 8003126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003128:	4a48      	ldr	r2, [pc, #288]	@ (800324c <UART_MspInit+0x19c>)
 800312a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800312e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003130:	4b46      	ldr	r3, [pc, #280]	@ (800324c <UART_MspInit+0x19c>)
 8003132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003138:	623b      	str	r3, [r7, #32]
 800313a:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 800313c:	4b43      	ldr	r3, [pc, #268]	@ (800324c <UART_MspInit+0x19c>)
 800313e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003140:	4a42      	ldr	r2, [pc, #264]	@ (800324c <UART_MspInit+0x19c>)
 8003142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003148:	4b40      	ldr	r3, [pc, #256]	@ (800324c <UART_MspInit+0x19c>)
 800314a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8003154:	4b3d      	ldr	r3, [pc, #244]	@ (800324c <UART_MspInit+0x19c>)
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	4a3c      	ldr	r2, [pc, #240]	@ (800324c <UART_MspInit+0x19c>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003160:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <UART_MspInit+0x19c>)
 8003162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	e023      	b.n	80031b6 <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 800316e:	4b37      	ldr	r3, [pc, #220]	@ (800324c <UART_MspInit+0x19c>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003172:	4a36      	ldr	r2, [pc, #216]	@ (800324c <UART_MspInit+0x19c>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800317a:	4b34      	ldr	r3, [pc, #208]	@ (800324c <UART_MspInit+0x19c>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8003186:	4b31      	ldr	r3, [pc, #196]	@ (800324c <UART_MspInit+0x19c>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318a:	4a30      	ldr	r2, [pc, #192]	@ (800324c <UART_MspInit+0x19c>)
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003192:	4b2e      	ldr	r3, [pc, #184]	@ (800324c <UART_MspInit+0x19c>)
 8003194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 800319e:	4b2b      	ldr	r3, [pc, #172]	@ (800324c <UART_MspInit+0x19c>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	4a2a      	ldr	r2, [pc, #168]	@ (800324c <UART_MspInit+0x19c>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031aa:	4b28      	ldr	r3, [pc, #160]	@ (800324c <UART_MspInit+0x19c>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 80031b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	3360      	adds	r3, #96	@ 0x60
 80031be:	443b      	add	r3, r7
 80031c0:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80031c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 80031ca:	2302      	movs	r3, #2
 80031cc:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 80031ce:	2301      	movs	r3, #1
 80031d0:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 80031d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80031d6:	3360      	adds	r3, #96	@ 0x60
 80031d8:	443b      	add	r3, r7
 80031da:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80031de:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 80031e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	3360      	adds	r3, #96	@ 0x60
 80031e8:	443b      	add	r3, r7
 80031ea:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80031ee:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fda9 	bl	8003d4c <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 80031fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	3360      	adds	r3, #96	@ 0x60
 8003202:	443b      	add	r3, r7
 8003204:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003208:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 800320a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800320e:	3360      	adds	r3, #96	@ 0x60
 8003210:	443b      	add	r3, r7
 8003212:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8003216:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8003218:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	3360      	adds	r3, #96	@ 0x60
 8003220:	443b      	add	r3, r7
 8003222:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8003226:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fd8d 	bl	8003d4c <HAL_GPIO_Init>
}
 8003232:	bf00      	nop
 8003234:	3760      	adds	r7, #96	@ 0x60
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	08006794 	.word	0x08006794
 8003240:	0800679c 	.word	0x0800679c
 8003244:	080067a0 	.word	0x080067a0
 8003248:	40008000 	.word	0x40008000
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800325a:	2004      	movs	r0, #4
 800325c:	f000 f93e 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8003260:	f7ff fc76 	bl	8002b50 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003264:	2000      	movs	r0, #0
 8003266:	f000 f80d 	bl	8003284 <HAL_InitTick>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	71fb      	strb	r3, [r7, #7]
 8003274:	e001      	b.n	800327a <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003276:	f7ff fb9f 	bl	80029b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800327a:	79fb      	ldrb	r3, [r7, #7]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003290:	4b17      	ldr	r3, [pc, #92]	@ (80032f0 <HAL_InitTick+0x6c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d023      	beq.n	80032e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003298:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <HAL_InitTick+0x70>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b14      	ldr	r3, [pc, #80]	@ (80032f0 <HAL_InitTick+0x6c>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f947 	bl	8003542 <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b07      	cmp	r3, #7
 80032be:	d809      	bhi.n	80032d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c0:	2200      	movs	r2, #0
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	f000 f913 	bl	80034f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032cc:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <HAL_InitTick+0x74>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e007      	b.n	80032e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	e004      	b.n	80032e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e001      	b.n	80032e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000040 	.word	0x20000040
 80032f4:	20000010 	.word	0x20000010
 80032f8:	2000003c 	.word	0x2000003c

080032fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <HAL_IncTick+0x20>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_IncTick+0x24>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4413      	add	r3, r2
 800330c:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <HAL_IncTick+0x24>)
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000040 	.word	0x20000040
 8003320:	20000244 	.word	0x20000244

08003324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return uwTick;
 8003328:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <HAL_GetTick+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000244 	.word	0x20000244

0800333c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800334c:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003358:	4013      	ands	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <__NVIC_GetPriorityGrouping+0x18>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0307 	and.w	r3, r3, #7
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0b      	blt.n	80033ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	@ (80033d8 <__NVIC_EnableIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	@ (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0152      	lsls	r2, r2, #5
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	@ (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0152      	lsls	r2, r2, #5
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	@ 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b03      	cmp	r3, #3
 800344c:	bf28      	it	cs
 800344e:	2303      	movcs	r3, #3
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3303      	adds	r3, #3
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b04      	subs	r3, #4
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	@ 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	@ (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	2107      	movs	r1, #7
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff8e 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff29 	bl	800333c <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff40 	bl	8003384 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff90 	bl	8003430 <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5f 	bl	80033dc <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff33 	bl	80033a0 <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffa4 	bl	8003498 <SysTick_Config>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800355a:	b480      	push	{r7}
 800355c:	b087      	sub	sp, #28
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	460b      	mov	r3, r1
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d011      	beq.n	8003596 <HAL_EXTI_RegisterCallback+0x3c>
 8003572:	2b02      	cmp	r3, #2
 8003574:	dc13      	bgt.n	800359e <HAL_EXTI_RegisterCallback+0x44>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_EXTI_RegisterCallback+0x26>
 800357a:	2b01      	cmp	r3, #1
 800357c:	d007      	beq.n	800358e <HAL_EXTI_RegisterCallback+0x34>
 800357e:	e00e      	b.n	800359e <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
      break;
 800358c:	e00a      	b.n	80035a4 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]
      break;
 8003594:	e006      	b.n	80035a4 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e002      	b.n	80035a4 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
      break;
 80035a2:	bf00      	nop
  }

  return status;
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e003      	b.n	80035ce <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2201      	movs	r2, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	4b17      	ldr	r3, [pc, #92]	@ (8003664 <HAL_EXTI_IRQHandler+0x88>)
 8003606:	4413      	add	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <HAL_EXTI_IRQHandler+0x8c>)
 8003634:	4413      	add	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4798      	blx	r3
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	4002f40c 	.word	0x4002f40c
 8003668:	4002f410 	.word	0x4002f410

0800366c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e142      	b.n	8003904 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff f9b4 	bl	8002a00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0210 	bic.w	r2, r2, #16
 80036a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a8:	f7ff fe3c 	bl	8003324 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036ae:	e012      	b.n	80036d6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036b0:	f7ff fe38 	bl	8003324 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b0a      	cmp	r3, #10
 80036bc:	d90b      	bls.n	80036d6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e116      	b.n	8003904 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d0e5      	beq.n	80036b0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036f4:	f7ff fe16 	bl	8003324 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036fa:	e012      	b.n	8003722 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80036fc:	f7ff fe12 	bl	8003324 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b0a      	cmp	r3, #10
 8003708:	d90b      	bls.n	8003722 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2203      	movs	r2, #3
 800371a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0f0      	b.n	8003904 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0e5      	beq.n	80036fc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0202 	orr.w	r2, r2, #2
 800373e:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003740:	4a72      	ldr	r2, [pc, #456]	@ (800390c <HAL_FDCAN_Init+0x2a0>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7c1b      	ldrb	r3, [r3, #16]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d108      	bne.n	8003762 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800375e:	619a      	str	r2, [r3, #24]
 8003760:	e007      	b.n	8003772 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003770:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7c5b      	ldrb	r3, [r3, #17]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d108      	bne.n	800378c <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003788:	619a      	str	r2, [r3, #24]
 800378a:	e007      	b.n	800379c <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800379a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	7c9b      	ldrb	r3, [r3, #18]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d108      	bne.n	80037b6 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037b2:	619a      	str	r2, [r3, #24]
 80037b4:	e007      	b.n	80037c6 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80037ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0210 	bic.w	r2, r2, #16
 80037fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0204 	orr.w	r2, r2, #4
 8003812:	619a      	str	r2, [r3, #24]
 8003814:	e02c      	b.n	8003870 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d028      	beq.n	8003870 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d01c      	beq.n	8003860 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003834:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0210 	orr.w	r2, r2, #16
 8003844:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d110      	bne.n	8003870 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	e007      	b.n	8003870 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0220 	orr.w	r2, r2, #32
 800386e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	3b01      	subs	r3, #1
 8003876:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	3b01      	subs	r3, #1
 800387e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003880:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003888:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	3b01      	subs	r3, #1
 8003892:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003898:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800389a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038a4:	d115      	bne.n	80038d2 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	3b01      	subs	r3, #1
 80038b2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038b4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	3b01      	subs	r3, #1
 80038bc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80038be:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	3b01      	subs	r3, #1
 80038c8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80038ce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80038d0:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f95d 	bl	8003ba8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	4000a500 	.word	0x4000a500

08003910 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d12c      	bne.n	8003982 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e023      	b.n	8003990 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f978 	bl	8003c54 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2101      	movs	r1, #1
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003974:	2201      	movs	r2, #1
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e006      	b.n	8003990 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003986:	f043 0208 	orr.w	r2, r3, #8
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003998:	b480      	push	{r7}
 800399a:	b08b      	sub	sp, #44	@ 0x2c
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80039b2:	7efb      	ldrb	r3, [r7, #27]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f040 80e8 	bne.w	8003b8a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b40      	cmp	r3, #64	@ 0x40
 80039be:	d137      	bne.n	8003a30 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0db      	b.n	8003b98 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f0:	d10a      	bne.n	8003a08 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a02:	d101      	bne.n	8003a08 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003a04:	2301      	movs	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2e:	e036      	b.n	8003a9e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d107      	bne.n	8003a50 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0a3      	b.n	8003b98 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a60:	d10a      	bne.n	8003a78 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a72:	d101      	bne.n	8003a78 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003a74:	2301      	movs	r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d107      	bne.n	8003ac2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	0c9b      	lsrs	r3, r3, #18
 8003ab8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e005      	b.n	8003ace <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	3304      	adds	r3, #4
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e1b      	lsrs	r3, r3, #24
 8003b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	0fda      	lsrs	r2, r3, #31
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	3304      	adds	r3, #4
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	e00a      	b.n	8003b5a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	441a      	add	r2, r3
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	440b      	add	r3, r1
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	3301      	adds	r3, #1
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4a11      	ldr	r2, [pc, #68]	@ (8003ba4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003b60:	5cd3      	ldrb	r3, [r2, r3]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d3ec      	bcc.n	8003b44 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d105      	bne.n	8003b7c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003b7a:	e004      	b.n	8003b86 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e006      	b.n	8003b98 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	372c      	adds	r7, #44	@ 0x2c
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	08006800 	.word	0x08006800

08003ba8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003bb0:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003bb2:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bca:	041a      	lsls	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003be8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	061a      	lsls	r2, r3, #24
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e005      	b.n	8003c36 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d3f3      	bcc.n	8003c2a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	4000ac00 	.word	0x4000ac00

08003c54 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003c72:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e00a      	b.n	8003c96 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003c88:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003c8e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003c90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c94:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ca0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003ca6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003cac:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e020      	b.n	8003d2a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3303      	adds	r3, #3
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	440b      	add	r3, r1
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d00:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3301      	adds	r3, #1
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	440b      	add	r3, r1
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d0e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	440a      	add	r2, r1
 8003d16:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d18:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	3304      	adds	r3, #4
 8003d22:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3304      	adds	r3, #4
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	4a06      	ldr	r2, [pc, #24]	@ (8003d48 <FDCAN_CopyMessageToRAM+0xf4>)
 8003d30:	5cd3      	ldrb	r3, [r2, r3]
 8003d32:	461a      	mov	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d3d6      	bcc.n	8003ce8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	3724      	adds	r7, #36	@ 0x24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	08006800 	.word	0x08006800

08003d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d5a:	e158      	b.n	800400e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 814a 	beq.w	8004008 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d005      	beq.n	8003d8c <HAL_GPIO_Init+0x40>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d130      	bne.n	8003dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 0201 	and.w	r2, r3, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d017      	beq.n	8003e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d123      	bne.n	8003e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	08da      	lsrs	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3208      	adds	r2, #8
 8003e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	08da      	lsrs	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3208      	adds	r2, #8
 8003e78:	6939      	ldr	r1, [r7, #16]
 8003e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	2203      	movs	r2, #3
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0203 	and.w	r2, r3, #3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80a4 	beq.w	8004008 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a52      	ldr	r2, [pc, #328]	@ (8004030 <HAL_GPIO_Init+0x2e4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d025      	beq.n	8003f38 <HAL_GPIO_Init+0x1ec>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a51      	ldr	r2, [pc, #324]	@ (8004034 <HAL_GPIO_Init+0x2e8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d01f      	beq.n	8003f34 <HAL_GPIO_Init+0x1e8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a50      	ldr	r2, [pc, #320]	@ (8004038 <HAL_GPIO_Init+0x2ec>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d019      	beq.n	8003f30 <HAL_GPIO_Init+0x1e4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a4f      	ldr	r2, [pc, #316]	@ (800403c <HAL_GPIO_Init+0x2f0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_GPIO_Init+0x1e0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a4e      	ldr	r2, [pc, #312]	@ (8004040 <HAL_GPIO_Init+0x2f4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00d      	beq.n	8003f28 <HAL_GPIO_Init+0x1dc>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004044 <HAL_GPIO_Init+0x2f8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <HAL_GPIO_Init+0x1d8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a4c      	ldr	r2, [pc, #304]	@ (8004048 <HAL_GPIO_Init+0x2fc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_GPIO_Init+0x1d4>
 8003f1c:	2306      	movs	r3, #6
 8003f1e:	e00c      	b.n	8003f3a <HAL_GPIO_Init+0x1ee>
 8003f20:	2307      	movs	r3, #7
 8003f22:	e00a      	b.n	8003f3a <HAL_GPIO_Init+0x1ee>
 8003f24:	2305      	movs	r3, #5
 8003f26:	e008      	b.n	8003f3a <HAL_GPIO_Init+0x1ee>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	e006      	b.n	8003f3a <HAL_GPIO_Init+0x1ee>
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e004      	b.n	8003f3a <HAL_GPIO_Init+0x1ee>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e002      	b.n	8003f3a <HAL_GPIO_Init+0x1ee>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_GPIO_Init+0x1ee>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	f002 0203 	and.w	r2, r2, #3
 8003f40:	00d2      	lsls	r2, r2, #3
 8003f42:	4093      	lsls	r3, r2
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003f4a:	4938      	ldr	r1, [pc, #224]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3318      	adds	r3, #24
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f58:	4b34      	ldr	r3, [pc, #208]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f82:	4b2a      	ldr	r3, [pc, #168]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fa6:	4a21      	ldr	r2, [pc, #132]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fac:	4b1f      	ldr	r3, [pc, #124]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fd2:	4a16      	ldr	r2, [pc, #88]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003fda:	4b14      	ldr	r3, [pc, #80]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8003fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004000:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <HAL_GPIO_Init+0x2e0>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f ae9f 	bne.w	8003d5c <HAL_GPIO_Init+0x10>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	4002f400 	.word	0x4002f400
 8004030:	42020000 	.word	0x42020000
 8004034:	42020400 	.word	0x42020400
 8004038:	42020800 	.word	0x42020800
 800403c:	42020c00 	.word	0x42020c00
 8004040:	42021000 	.word	0x42021000
 8004044:	42021400 	.word	0x42021400
 8004048:	42021800 	.word	0x42021800

0800404c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
 8004058:	4613      	mov	r3, r2
 800405a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800405c:	787b      	ldrb	r3, [r7, #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004068:	e002      	b.n	8004070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e007      	b.n	80040aa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 0204 	bic.w	r2, r3, #4
 80040a2:	4905      	ldr	r1, [pc, #20]	@ (80040b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40030400 	.word	0x40030400

080040bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_ICACHE_Enable+0x1c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <HAL_ICACHE_Enable+0x1c>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40030400 	.word	0x40030400

080040dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80040e0:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40007000 	.word	0x40007000

080040f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004100:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004108:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800410a:	f000 f871 	bl	80041f0 <HAL_PWREx_SMPS_GetEffectiveMode>
 800410e:	4603      	mov	r3, r0
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004114:	d101      	bne.n	800411a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e03e      	b.n	8004198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800411a:	4b21      	ldr	r3, [pc, #132]	@ (80041a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004126:	d101      	bne.n	800412c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e035      	b.n	8004198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d101      	bne.n	8004138 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e02f      	b.n	8004198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004138:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004140:	4917      	ldr	r1, [pc, #92]	@ (80041a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4313      	orrs	r3, r2
 8004146:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004148:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	4a16      	ldr	r2, [pc, #88]	@ (80041a8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	09db      	lsrs	r3, r3, #7
 8004156:	2232      	movs	r2, #50	@ 0x32
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	4a13      	ldr	r2, [pc, #76]	@ (80041ac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	08db      	lsrs	r3, r3, #3
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004168:	e002      	b.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417c:	d102      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f2      	bne.n	800416a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004184:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004190:	d101      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e000      	b.n	8004198 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40007000 	.word	0x40007000
 80041a4:	20000010 	.word	0x20000010
 80041a8:	0a7c5ac5 	.word	0x0a7c5ac5
 80041ac:	cccccccd 	.word	0xcccccccd

080041b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80041ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041be:	6053      	str	r3, [r2, #4]
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40007000 	.word	0x40007000

080041d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041de:	6093      	str	r3, [r2, #8]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80041f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800420a:	607b      	str	r3, [r7, #4]
 800420c:	e00a      	b.n	8004224 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	e001      	b.n	8004224 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004220:	2300      	movs	r3, #0
 8004222:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004224:	687b      	ldr	r3, [r7, #4]
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40007000 	.word	0x40007000

08004238 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f000 bcc2 	b.w	8004bd0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800424c:	4b99      	ldr	r3, [pc, #612]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004256:	4b97      	ldr	r3, [pc, #604]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80e9 	beq.w	8004440 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <HAL_RCC_OscConfig+0x4a>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b0c      	cmp	r3, #12
 8004278:	f040 8083 	bne.w	8004382 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d17f      	bne.n	8004382 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004282:	4b8c      	ldr	r3, [pc, #560]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <HAL_RCC_OscConfig+0x64>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f000 bc9a 	b.w	8004bd0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a0:	4b84      	ldr	r3, [pc, #528]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <HAL_RCC_OscConfig+0x7e>
 80042ac:	4b81      	ldr	r3, [pc, #516]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042b4:	e005      	b.n	80042c2 <HAL_RCC_OscConfig+0x8a>
 80042b6:	4b7f      	ldr	r3, [pc, #508]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d224      	bcs.n	8004310 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fe9c 	bl	8005008 <RCC_SetFlashLatencyFromMSIRange>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f000 bc7a 	b.w	8004bd0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042dc:	4b75      	ldr	r3, [pc, #468]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a74      	ldr	r2, [pc, #464]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	f043 0308 	orr.w	r3, r3, #8
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b72      	ldr	r3, [pc, #456]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	496f      	ldr	r1, [pc, #444]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fa:	4b6e      	ldr	r3, [pc, #440]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	496a      	ldr	r1, [pc, #424]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
 800430e:	e026      	b.n	800435e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a67      	ldr	r2, [pc, #412]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004316:	f043 0308 	orr.w	r3, r3, #8
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b65      	ldr	r3, [pc, #404]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	4962      	ldr	r1, [pc, #392]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800432e:	4b61      	ldr	r3, [pc, #388]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	495d      	ldr	r1, [pc, #372]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fe5b 	bl	8005008 <RCC_SetFlashLatencyFromMSIRange>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f000 bc39 	b.w	8004bd0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800435e:	f000 fe17 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004362:	4603      	mov	r3, r0
 8004364:	4a54      	ldr	r2, [pc, #336]	@ (80044b8 <HAL_RCC_OscConfig+0x280>)
 8004366:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004368:	4b54      	ldr	r3, [pc, #336]	@ (80044bc <HAL_RCC_OscConfig+0x284>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe ff89 	bl	8003284 <HAL_InitTick>
 8004372:	4603      	mov	r3, r0
 8004374:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d060      	beq.n	800443e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	f000 bc27 	b.w	8004bd0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d039      	beq.n	80043fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800438a:	4b4a      	ldr	r3, [pc, #296]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a49      	ldr	r2, [pc, #292]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004396:	f7fe ffc5 	bl	8003324 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800439c:	e00f      	b.n	80043be <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800439e:	f7fe ffc1 	bl	8003324 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d908      	bls.n	80043be <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ac:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	f000 bc09 	b.w	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043be:	4b3d      	ldr	r3, [pc, #244]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0e9      	beq.n	800439e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ca:	4b3a      	ldr	r3, [pc, #232]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a39      	ldr	r2, [pc, #228]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	f043 0308 	orr.w	r3, r3, #8
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	4934      	ldr	r1, [pc, #208]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e8:	4b32      	ldr	r3, [pc, #200]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	492f      	ldr	r1, [pc, #188]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
 80043fc:	e020      	b.n	8004440 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043fe:	4b2d      	ldr	r3, [pc, #180]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800440a:	f7fe ff8b 	bl	8003324 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004410:	e00e      	b.n	8004430 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004412:	f7fe ff87 	bl	8003324 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d907      	bls.n	8004430 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004420:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e3cf      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004430:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ea      	bne.n	8004412 <HAL_RCC_OscConfig+0x1da>
 800443c:	e000      	b.n	8004440 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800443e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d07e      	beq.n	800454a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b08      	cmp	r3, #8
 8004450:	d005      	beq.n	800445e <HAL_RCC_OscConfig+0x226>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b0c      	cmp	r3, #12
 8004456:	d10e      	bne.n	8004476 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d10b      	bne.n	8004476 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445e:	4b15      	ldr	r3, [pc, #84]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d06e      	beq.n	8004548 <HAL_RCC_OscConfig+0x310>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d16a      	bne.n	8004548 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e3ac      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x256>
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0b      	ldr	r2, [pc, #44]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e024      	b.n	80044d8 <HAL_RCC_OscConfig+0x2a0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004496:	d113      	bne.n	80044c0 <HAL_RCC_OscConfig+0x288>
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 800449e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b03      	ldr	r3, [pc, #12]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a02      	ldr	r2, [pc, #8]	@ (80044b4 <HAL_RCC_OscConfig+0x27c>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e012      	b.n	80044d8 <HAL_RCC_OscConfig+0x2a0>
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	20000010 	.word	0x20000010
 80044bc:	2000003c 	.word	0x2000003c
 80044c0:	4b8b      	ldr	r3, [pc, #556]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a8a      	ldr	r2, [pc, #552]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b88      	ldr	r3, [pc, #544]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a87      	ldr	r2, [pc, #540]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d019      	beq.n	8004514 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fe ff20 	bl	8003324 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e6:	e00e      	b.n	8004506 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fe ff1c 	bl	8003324 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	@ 0x64
 80044f4:	d907      	bls.n	8004506 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f6:	4b7e      	ldr	r3, [pc, #504]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e364      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004506:	4b7a      	ldr	r3, [pc, #488]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ea      	beq.n	80044e8 <HAL_RCC_OscConfig+0x2b0>
 8004512:	e01a      	b.n	800454a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fe ff06 	bl	8003324 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800451a:	e00e      	b.n	800453a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fe ff02 	bl	8003324 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d907      	bls.n	800453a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452a:	4b71      	ldr	r3, [pc, #452]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e34a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800453a:	4b6d      	ldr	r3, [pc, #436]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ea      	bne.n	800451c <HAL_RCC_OscConfig+0x2e4>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d06c      	beq.n	8004630 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x330>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d119      	bne.n	8004596 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d116      	bne.n	8004596 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004568:	4b61      	ldr	r3, [pc, #388]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_OscConfig+0x348>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e327      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	4958      	ldr	r1, [pc, #352]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	e04c      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d029      	beq.n	80045f2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459e:	4b54      	ldr	r3, [pc, #336]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a53      	ldr	r2, [pc, #332]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fe febb 	bl	8003324 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b0:	e00e      	b.n	80045d0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fe feb7 	bl	8003324 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d907      	bls.n	80045d0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	4b4b      	ldr	r3, [pc, #300]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e2ff      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d0:	4b47      	ldr	r3, [pc, #284]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ea      	beq.n	80045b2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045dc:	4b44      	ldr	r3, [pc, #272]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	4941      	ldr	r1, [pc, #260]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	e01e      	b.n	8004630 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f2:	4b3f      	ldr	r3, [pc, #252]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a3e      	ldr	r2, [pc, #248]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80045f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fe fe91 	bl	8003324 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004604:	e00e      	b.n	8004624 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004606:	f7fe fe8d 	bl	8003324 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d907      	bls.n	8004624 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004614:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e2d5      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004624:	4b32      	ldr	r3, [pc, #200]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ea      	bne.n	8004606 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d062      	beq.n	8004702 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d038      	beq.n	80046b6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d108      	bne.n	800465e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800464c:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004652:	4a27      	ldr	r2, [pc, #156]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800465c:	e007      	b.n	800466e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800465e:	4b24      	ldr	r3, [pc, #144]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004664:	4a22      	ldr	r2, [pc, #136]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004666:	f043 0310 	orr.w	r3, r3, #16
 800466a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466e:	4b20      	ldr	r3, [pc, #128]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004674:	4a1e      	ldr	r2, [pc, #120]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fe fe51 	bl	8003324 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004684:	e00f      	b.n	80046a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004686:	f7fe fe4d 	bl	8003324 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b07      	cmp	r3, #7
 8004692:	d908      	bls.n	80046a6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004694:	4b16      	ldr	r3, [pc, #88]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e294      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a6:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0e8      	beq.n	8004686 <HAL_RCC_OscConfig+0x44e>
 80046b4:	e025      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b6:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046bc:	4a0c      	ldr	r2, [pc, #48]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fe fe2d 	bl	8003324 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046cc:	e012      	b.n	80046f4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fe fe29 	bl	8003324 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b07      	cmp	r3, #7
 80046da:	d90b      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046dc:	4b04      	ldr	r3, [pc, #16]	@ (80046f0 <HAL_RCC_OscConfig+0x4b8>)
 80046de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e270      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f4:	4ba8      	ldr	r3, [pc, #672]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80046f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 812d 	beq.w	800496a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004710:	2300      	movs	r3, #0
 8004712:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004714:	4ba0      	ldr	r3, [pc, #640]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10d      	bne.n	800473c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b9d      	ldr	r3, [pc, #628]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004724:	4a9c      	ldr	r2, [pc, #624]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472a:	6593      	str	r3, [r2, #88]	@ 0x58
 800472c:	4b9a      	ldr	r3, [pc, #616]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004738:	2301      	movs	r3, #1
 800473a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473c:	4b97      	ldr	r3, [pc, #604]	@ (800499c <HAL_RCC_OscConfig+0x764>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d11e      	bne.n	8004786 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004748:	4b94      	ldr	r3, [pc, #592]	@ (800499c <HAL_RCC_OscConfig+0x764>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a93      	ldr	r2, [pc, #588]	@ (800499c <HAL_RCC_OscConfig+0x764>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004754:	f7fe fde6 	bl	8003324 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475a:	e00e      	b.n	800477a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fe fde2 	bl	8003324 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d907      	bls.n	800477a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	4b8c      	ldr	r3, [pc, #560]	@ (800499c <HAL_RCC_OscConfig+0x764>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e22a      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477a:	4b88      	ldr	r3, [pc, #544]	@ (800499c <HAL_RCC_OscConfig+0x764>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ea      	beq.n	800475c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01f      	beq.n	80047d2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d010      	beq.n	80047c0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800479e:	4b7e      	ldr	r3, [pc, #504]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a4:	4a7c      	ldr	r2, [pc, #496]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b4:	4a78      	ldr	r2, [pc, #480]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047be:	e018      	b.n	80047f2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047c0:	4b75      	ldr	r3, [pc, #468]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	4a74      	ldr	r2, [pc, #464]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d0:	e00f      	b.n	80047f2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047d2:	4b71      	ldr	r3, [pc, #452]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	4a6f      	ldr	r2, [pc, #444]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80047ea:	f023 0304 	bic.w	r3, r3, #4
 80047ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d068      	beq.n	80048cc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fe fd93 	bl	8003324 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004800:	e011      	b.n	8004826 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004802:	f7fe fd8f 	bl	8003324 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004810:	4293      	cmp	r3, r2
 8004812:	d908      	bls.n	8004826 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004814:	4b60      	ldr	r3, [pc, #384]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e1d4      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004826:	4b5c      	ldr	r3, [pc, #368]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0e6      	beq.n	8004802 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	d022      	beq.n	8004886 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004840:	4b55      	ldr	r3, [pc, #340]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	4a54      	ldr	r2, [pc, #336]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004850:	e011      	b.n	8004876 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fe fd67 	bl	8003324 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d908      	bls.n	8004876 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004864:	4b4c      	ldr	r3, [pc, #304]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e1ac      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004876:	4b48      	ldr	r3, [pc, #288]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0e6      	beq.n	8004852 <HAL_RCC_OscConfig+0x61a>
 8004884:	e068      	b.n	8004958 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004886:	4b44      	ldr	r3, [pc, #272]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488c:	4a42      	ldr	r2, [pc, #264]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 800488e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004896:	e011      	b.n	80048bc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fe fd44 	bl	8003324 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d908      	bls.n	80048bc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e189      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048bc:	4b36      	ldr	r3, [pc, #216]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e6      	bne.n	8004898 <HAL_RCC_OscConfig+0x660>
 80048ca:	e045      	b.n	8004958 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fe fd2a 	bl	8003324 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d2:	e011      	b.n	80048f8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d4:	f7fe fd26 	bl	8003324 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d908      	bls.n	80048f8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e16b      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f8:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e6      	bne.n	80048d4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004906:	4b24      	ldr	r3, [pc, #144]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004910:	2b00      	cmp	r3, #0
 8004912:	d021      	beq.n	8004958 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004914:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491a:	4a1f      	ldr	r2, [pc, #124]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 800491c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004924:	e011      	b.n	800494a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fe fcfd 	bl	8003324 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d908      	bls.n	800494a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004938:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e142      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800494a:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004958:	7ffb      	ldrb	r3, [r7, #31]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d105      	bne.n	800496a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495e:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	4a0d      	ldr	r2, [pc, #52]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004968:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d04f      	beq.n	8004a16 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d028      	beq.n	80049d0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004984:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <HAL_RCC_OscConfig+0x760>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fe fcc9 	bl	8003324 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004994:	e014      	b.n	80049c0 <HAL_RCC_OscConfig+0x788>
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a0:	f7fe fcc0 	bl	8003324 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d908      	bls.n	80049c0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049ae:	4b8a      	ldr	r3, [pc, #552]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 80049b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e107      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049c0:	4b85      	ldr	r3, [pc, #532]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 80049c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0e8      	beq.n	80049a0 <HAL_RCC_OscConfig+0x768>
 80049ce:	e022      	b.n	8004a16 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049d0:	4b81      	ldr	r3, [pc, #516]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 80049d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049d6:	4a80      	ldr	r2, [pc, #512]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fe fca0 	bl	8003324 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049e6:	e00f      	b.n	8004a08 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e8:	f7fe fc9c 	bl	8003324 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d908      	bls.n	8004a08 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049f6:	4b78      	ldr	r3, [pc, #480]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 80049f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0e3      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a08:	4b73      	ldr	r3, [pc, #460]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e8      	bne.n	80049e8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80d7 	beq.w	8004bce <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a20:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b0c      	cmp	r3, #12
 8004a2a:	f000 8091 	beq.w	8004b50 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d166      	bne.n	8004b04 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b68      	ldr	r3, [pc, #416]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a67      	ldr	r2, [pc, #412]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004a3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fe fc6f 	bl	8003324 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a48:	e00e      	b.n	8004a68 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fe fc6b 	bl	8003324 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d907      	bls.n	8004a68 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a58:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0b3      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a68:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ea      	bne.n	8004a4a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a74:	4b58      	ldr	r3, [pc, #352]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	4b58      	ldr	r3, [pc, #352]	@ (8004bdc <HAL_RCC_OscConfig+0x9a4>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a84:	3a01      	subs	r2, #1
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a8e:	0212      	lsls	r2, r2, #8
 8004a90:	4311      	orrs	r1, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a96:	0852      	lsrs	r2, r2, #1
 8004a98:	3a01      	subs	r2, #1
 8004a9a:	0552      	lsls	r2, r2, #21
 8004a9c:	4311      	orrs	r1, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004aa2:	0852      	lsrs	r2, r2, #1
 8004aa4:	3a01      	subs	r2, #1
 8004aa6:	0652      	lsls	r2, r2, #25
 8004aa8:	4311      	orrs	r1, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004aae:	06d2      	lsls	r2, r2, #27
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	4949      	ldr	r1, [pc, #292]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab8:	4b47      	ldr	r3, [pc, #284]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a46      	ldr	r2, [pc, #280]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ac2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac4:	4b44      	ldr	r3, [pc, #272]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4a43      	ldr	r2, [pc, #268]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ace:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fc28 	bl	8003324 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad6:	e00e      	b.n	8004af6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fe fc24 	bl	8003324 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d907      	bls.n	8004af6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e06c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af6:	4b38      	ldr	r3, [pc, #224]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0ea      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x8a0>
 8004b02:	e064      	b.n	8004bce <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b04:	4b34      	ldr	r3, [pc, #208]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a33      	ldr	r2, [pc, #204]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fe fc08 	bl	8003324 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b16:	e00e      	b.n	8004b36 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fe fc04 	bl	8003324 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d907      	bls.n	8004b36 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b26:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b36:	4b28      	ldr	r3, [pc, #160]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ea      	bne.n	8004b18 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b42:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4924      	ldr	r1, [pc, #144]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004b48:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <HAL_RCC_OscConfig+0x9a8>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60cb      	str	r3, [r1, #12]
 8004b4e:	e03e      	b.n	8004bce <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e039      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <HAL_RCC_OscConfig+0x9a0>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f003 0203 	and.w	r2, r3, #3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d12c      	bne.n	8004bca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d123      	bne.n	8004bca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d11b      	bne.n	8004bca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d113      	bne.n	8004bca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d109      	bne.n	8004bca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d001      	beq.n	8004bce <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3720      	adds	r7, #32
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	019f800c 	.word	0x019f800c
 8004be0:	feeefffc 	.word	0xfeeefffc

08004be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e11c      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b90      	ldr	r3, [pc, #576]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d910      	bls.n	8004c2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 020f 	bic.w	r2, r3, #15
 8004c12:	498b      	ldr	r1, [pc, #556]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b89      	ldr	r3, [pc, #548]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e104      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	4b81      	ldr	r3, [pc, #516]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d908      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4b7e      	ldr	r3, [pc, #504]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	497b      	ldr	r1, [pc, #492]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8085 	beq.w	8004d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d11f      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c70:	4b74      	ldr	r3, [pc, #464]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0da      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004c80:	f000 fa26 	bl	80050d0 <RCC_GetSysClockFreqFromPLLSource>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4a6f      	ldr	r2, [pc, #444]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d947      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d141      	bne.n	8004d1e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca2:	4a68      	ldr	r2, [pc, #416]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004caa:	2380      	movs	r3, #128	@ 0x80
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e036      	b.n	8004d1e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb8:	4b62      	ldr	r3, [pc, #392]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d115      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0b6      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0aa      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce0:	4b58      	ldr	r3, [pc, #352]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0a2      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004cf0:	f000 f8b0 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8004cf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4a53      	ldr	r2, [pc, #332]	@ (8004e48 <HAL_RCC_ClockConfig+0x264>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d90f      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004cfe:	4b51      	ldr	r3, [pc, #324]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d12:	4a4c      	ldr	r2, [pc, #304]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d1e:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4946      	ldr	r1, [pc, #280]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fe faf8 	bl	8003324 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	e013      	b.n	8004d60 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d38:	f7fe faf4 	bl	8003324 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d90a      	bls.n	8004d60 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 020c 	and.w	r2, r3, #12
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e06a      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d60:	4b38      	ldr	r3, [pc, #224]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 020c 	and.w	r2, r3, #12
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d1e2      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b80      	cmp	r3, #128	@ 0x80
 8004d76:	d105      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d78:	4b32      	ldr	r3, [pc, #200]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a31      	ldr	r2, [pc, #196]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d82:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d208      	bcs.n	8004db2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4925      	ldr	r1, [pc, #148]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db2:	4b23      	ldr	r3, [pc, #140]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d210      	bcs.n	8004de2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f023 020f 	bic.w	r2, r3, #15
 8004dc8:	491d      	ldr	r1, [pc, #116]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <HAL_RCC_ClockConfig+0x25c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d001      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e029      	b.n	8004e36 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dee:	4b15      	ldr	r3, [pc, #84]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	4912      	ldr	r1, [pc, #72]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	490a      	ldr	r1, [pc, #40]	@ (8004e44 <HAL_RCC_ClockConfig+0x260>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e20:	f000 f8b6 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a09      	ldr	r2, [pc, #36]	@ (8004e4c <HAL_RCC_ClockConfig+0x268>)
 8004e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004e2a:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <HAL_RCC_ClockConfig+0x26c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe fa28 	bl	8003284 <HAL_InitTick>
 8004e34:	4603      	mov	r3, r0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40022000 	.word	0x40022000
 8004e44:	40021000 	.word	0x40021000
 8004e48:	04c4b400 	.word	0x04c4b400
 8004e4c:	20000010 	.word	0x20000010
 8004e50:	2000003c 	.word	0x2000003c

08004e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b089      	sub	sp, #36	@ 0x24
 8004e58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e62:	4b47      	ldr	r3, [pc, #284]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e6c:	4b44      	ldr	r3, [pc, #272]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	d121      	bne.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d11e      	bne.n	8004ec6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e88:	4b3d      	ldr	r3, [pc, #244]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e94:	4b3a      	ldr	r3, [pc, #232]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	e005      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ea4:	4b36      	ldr	r3, [pc, #216]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004eb0:	4a34      	ldr	r2, [pc, #208]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x130>)
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d102      	bne.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x134>)
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	e004      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8004eda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d146      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004ee2:	4b27      	ldr	r3, [pc, #156]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eec:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d003      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0xb4>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d00d      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0xce>
 8004f06:	e019      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f08:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x134>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	4a1b      	ldr	r2, [pc, #108]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f12:	68d2      	ldr	r2, [r2, #12]
 8004f14:	0a12      	lsrs	r2, r2, #8
 8004f16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	617b      	str	r3, [r7, #20]
        break;
 8004f20:	e019      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f22:	4a1a      	ldr	r2, [pc, #104]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x138>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f2c:	68d2      	ldr	r2, [r2, #12]
 8004f2e:	0a12      	lsrs	r2, r2, #8
 8004f30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]
        break;
 8004f3a:	e00c      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	4a0e      	ldr	r2, [pc, #56]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f46:	68d2      	ldr	r2, [r2, #12]
 8004f48:	0a12      	lsrs	r2, r2, #8
 8004f4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	617b      	str	r3, [r7, #20]
        break;
 8004f54:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004f56:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	0e5b      	lsrs	r3, r3, #25
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	3301      	adds	r3, #1
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f70:	69bb      	ldr	r3, [r7, #24]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3724      	adds	r7, #36	@ 0x24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	080067c0 	.word	0x080067c0
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	007a1200 	.word	0x007a1200

08004f90 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004f94:	f7ff ff5e 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x20>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	4903      	ldr	r1, [pc, #12]	@ (8004fb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	080067a8 	.word	0x080067a8

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fbc:	f7ff ffe8 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4903      	ldr	r1, [pc, #12]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	080067b8 	.word	0x080067b8

08004fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fe4:	f7ff ffd4 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0adb      	lsrs	r3, r3, #11
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	@ (8005004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	080067b8 	.word	0x080067b8

08005008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005014:	4b2c      	ldr	r3, [pc, #176]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005020:	f7ff f85c 	bl	80040dc <HAL_PWREx_GetVoltageRange>
 8005024:	6138      	str	r0, [r7, #16]
 8005026:	e014      	b.n	8005052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005028:	4b27      	ldr	r3, [pc, #156]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800502a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502c:	4a26      	ldr	r2, [pc, #152]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800502e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005032:	6593      	str	r3, [r2, #88]	@ 0x58
 8005034:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005040:	f7ff f84c 	bl	80040dc <HAL_PWREx_GetVoltageRange>
 8005044:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005046:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504a:	4a1f      	ldr	r2, [pc, #124]	@ (80050c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800504c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005050:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505e:	d10b      	bne.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b80      	cmp	r3, #128	@ 0x80
 8005064:	d919      	bls.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2ba0      	cmp	r3, #160	@ 0xa0
 800506a:	d902      	bls.n	8005072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800506c:	2302      	movs	r3, #2
 800506e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005070:	e013      	b.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005072:	2301      	movs	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005076:	e010      	b.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b80      	cmp	r3, #128	@ 0x80
 800507c:	d902      	bls.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800507e:	2303      	movs	r3, #3
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e00a      	b.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b80      	cmp	r3, #128	@ 0x80
 8005088:	d102      	bne.n	8005090 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800508a:	2302      	movs	r3, #2
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e004      	b.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b70      	cmp	r3, #112	@ 0x70
 8005094:	d101      	bne.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005096:	2301      	movs	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 020f 	bic.w	r2, r3, #15
 80050a2:	490a      	ldr	r1, [pc, #40]	@ (80050cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80050aa:	4b08      	ldr	r3, [pc, #32]	@ (80050cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40022000 	.word	0x40022000

080050d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050d6:	4b31      	ldr	r3, [pc, #196]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050e0:	4b2e      	ldr	r3, [pc, #184]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	3301      	adds	r3, #1
 80050ec:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d015      	beq.n	8005120 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d839      	bhi.n	800516e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d01c      	beq.n	800513a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d133      	bne.n	800516e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005106:	4a26      	ldr	r2, [pc, #152]	@ (80051a0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	4a23      	ldr	r2, [pc, #140]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	0a12      	lsrs	r2, r2, #8
 8005114:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	613b      	str	r3, [r7, #16]
      break;
 800511e:	e029      	b.n	8005174 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005120:	4a20      	ldr	r2, [pc, #128]	@ (80051a4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	4a1c      	ldr	r2, [pc, #112]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800512a:	68d2      	ldr	r2, [r2, #12]
 800512c:	0a12      	lsrs	r2, r2, #8
 800512e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	613b      	str	r3, [r7, #16]
      break;
 8005138:	e01c      	b.n	8005174 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800513a:	4b18      	ldr	r3, [pc, #96]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005146:	4b15      	ldr	r3, [pc, #84]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e005      	b.n	8005162 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005156:	4b11      	ldr	r3, [pc, #68]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005162:	4a11      	ldr	r2, [pc, #68]	@ (80051a8 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516a:	613b      	str	r3, [r7, #16]
        break;
 800516c:	e002      	b.n	8005174 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
      break;
 8005172:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005174:	4b09      	ldr	r3, [pc, #36]	@ (800519c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	0e5b      	lsrs	r3, r3, #25
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	3301      	adds	r3, #1
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800518e:	683b      	ldr	r3, [r7, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40021000 	.word	0x40021000
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	007a1200 	.word	0x007a1200
 80051a8:	080067c0 	.word	0x080067c0

080051ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051b8:	2300      	movs	r3, #0
 80051ba:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d040      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051cc:	2b80      	cmp	r3, #128	@ 0x80
 80051ce:	d02a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051d0:	2b80      	cmp	r3, #128	@ 0x80
 80051d2:	d825      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051d4:	2b60      	cmp	r3, #96	@ 0x60
 80051d6:	d026      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051d8:	2b60      	cmp	r3, #96	@ 0x60
 80051da:	d821      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051dc:	2b40      	cmp	r3, #64	@ 0x40
 80051de:	d006      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80051e0:	2b40      	cmp	r3, #64	@ 0x40
 80051e2:	d81d      	bhi.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d010      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80051ec:	e018      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051ee:	4b8f      	ldr	r3, [pc, #572]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4a8e      	ldr	r2, [pc, #568]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051fa:	e015      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	2100      	movs	r1, #0
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fb56 	bl	80058b4 <RCCEx_PLLSAI1_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800520c:	e00c      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3320      	adds	r3, #32
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fc33 	bl	8005a80 <RCCEx_PLLSAI2_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800521e:	e003      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	77fb      	strb	r3, [r7, #31]
        break;
 8005224:	e000      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005228:	7ffb      	ldrb	r3, [r7, #31]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800522e:	4b7f      	ldr	r3, [pc, #508]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005234:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800523c:	497b      	ldr	r1, [pc, #492]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005244:	e001      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	7ffb      	ldrb	r3, [r7, #31]
 8005248:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d047      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525e:	d030      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005264:	d82a      	bhi.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800526a:	d02a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800526c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005270:	d824      	bhi.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005276:	d008      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800527c:	d81e      	bhi.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005286:	d010      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005288:	e018      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800528a:	4b68      	ldr	r3, [pc, #416]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	4a67      	ldr	r2, [pc, #412]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005294:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005296:	e015      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fb08 	bl	80058b4 <RCCEx_PLLSAI1_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052a8:	e00c      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3320      	adds	r3, #32
 80052ae:	2100      	movs	r1, #0
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fbe5 	bl	8005a80 <RCCEx_PLLSAI2_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	77fb      	strb	r3, [r7, #31]
        break;
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80052c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10b      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052ca:	4b58      	ldr	r3, [pc, #352]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d8:	4954      	ldr	r1, [pc, #336]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80052e0:	e001      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e2:	7ffb      	ldrb	r3, [r7, #31]
 80052e4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80ab 	beq.w	800544a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f4:	2300      	movs	r3, #0
 80052f6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f8:	4b4c      	ldr	r3, [pc, #304]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005304:	4b49      	ldr	r3, [pc, #292]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	4a48      	ldr	r2, [pc, #288]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005310:	4b46      	ldr	r3, [pc, #280]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005320:	4b43      	ldr	r3, [pc, #268]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a42      	ldr	r2, [pc, #264]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800532a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800532c:	f7fd fffa 	bl	8003324 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005332:	e00f      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005334:	f7fd fff6 	bl	8003324 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d908      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005342:	4b3b      	ldr	r3, [pc, #236]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005352:	e006      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005354:	4b36      	ldr	r3, [pc, #216]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0e9      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005362:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005364:	7ffb      	ldrb	r3, [r7, #31]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d164      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800536a:	4b30      	ldr	r3, [pc, #192]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005374:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01f      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	429a      	cmp	r2, r3
 8005386:	d019      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005388:	4b28      	ldr	r3, [pc, #160]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005392:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005394:	4b25      	ldr	r3, [pc, #148]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539a:	4a24      	ldr	r2, [pc, #144]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a4:	4b21      	ldr	r3, [pc, #132]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053aa:	4a20      	ldr	r2, [pc, #128]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053b4:	4a1d      	ldr	r2, [pc, #116]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01f      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fd ffad 	bl	8003324 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053cc:	e012      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd ffa9 	bl	8003324 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d909      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e0:	4b12      	ldr	r3, [pc, #72]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80053f2:	e007      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f4:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0e5      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005404:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005406:	7ffb      	ldrb	r3, [r7, #31]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10c      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005412:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541c:	4903      	ldr	r1, [pc, #12]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005424:	e008      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005426:	7ffb      	ldrb	r3, [r7, #31]
 8005428:	77bb      	strb	r3, [r7, #30]
 800542a:	e005      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800542c:	40021000 	.word	0x40021000
 8005430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	7ffb      	ldrb	r3, [r7, #31]
 8005436:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d105      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543e:	4b9c      	ldr	r3, [pc, #624]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	4a9b      	ldr	r2, [pc, #620]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005448:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005456:	4b96      	ldr	r3, [pc, #600]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545c:	f023 0203 	bic.w	r2, r3, #3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005464:	4992      	ldr	r1, [pc, #584]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005478:	4b8d      	ldr	r3, [pc, #564]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f023 020c 	bic.w	r2, r3, #12
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005486:	498a      	ldr	r1, [pc, #552]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800549a:	4b85      	ldr	r3, [pc, #532]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a8:	4981      	ldr	r1, [pc, #516]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054bc:	4b7c      	ldr	r3, [pc, #496]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	4979      	ldr	r1, [pc, #484]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054de:	4b74      	ldr	r3, [pc, #464]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ec:	4970      	ldr	r1, [pc, #448]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005500:	4b6b      	ldr	r3, [pc, #428]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550e:	4968      	ldr	r1, [pc, #416]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005522:	4b63      	ldr	r3, [pc, #396]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005530:	495f      	ldr	r1, [pc, #380]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005544:	4b5a      	ldr	r3, [pc, #360]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005552:	4957      	ldr	r1, [pc, #348]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005566:	4b52      	ldr	r3, [pc, #328]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005574:	494e      	ldr	r1, [pc, #312]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d031      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800558c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005590:	d00e      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005596:	d814      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800559c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055a0:	d10f      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a2:	4b43      	ldr	r3, [pc, #268]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	4a42      	ldr	r2, [pc, #264]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ac:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80055ae:	e00c      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f97c 	bl	80058b4 <RCCEx_PLLSAI1_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80055c0:	e003      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	77fb      	strb	r3, [r7, #31]
        break;
 80055c6:	e000      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80055c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ca:	7ffb      	ldrb	r3, [r7, #31]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055d0:	4b37      	ldr	r3, [pc, #220]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055de:	4934      	ldr	r1, [pc, #208]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055e6:	e001      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	7ffb      	ldrb	r3, [r7, #31]
 80055ea:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055f8:	4b2d      	ldr	r3, [pc, #180]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005606:	492a      	ldr	r1, [pc, #168]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800561a:	4b25      	ldr	r3, [pc, #148]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005620:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005628:	4921      	ldr	r1, [pc, #132]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800563c:	4b1c      	ldr	r3, [pc, #112]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005642:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564a:	4919      	ldr	r1, [pc, #100]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800565e:	4b14      	ldr	r3, [pc, #80]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005660:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005664:	f023 0203 	bic.w	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	4910      	ldr	r1, [pc, #64]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02b      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005680:	4b0b      	ldr	r3, [pc, #44]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800568e:	4908      	ldr	r1, [pc, #32]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800569e:	d109      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a0:	4b03      	ldr	r3, [pc, #12]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a02      	ldr	r2, [pc, #8]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80056a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056aa:	60d3      	str	r3, [r2, #12]
 80056ac:	e014      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2101      	movs	r1, #1
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f8f5 	bl	80058b4 <RCCEx_PLLSAI1_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d04a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ec:	d108      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80056ee:	4b70      	ldr	r3, [pc, #448]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056f4:	4a6e      	ldr	r2, [pc, #440]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80056f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80056fe:	e012      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005700:	4b6b      	ldr	r3, [pc, #428]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800570e:	4968      	ldr	r1, [pc, #416]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005716:	4b66      	ldr	r3, [pc, #408]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005718:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800571c:	4a64      	ldr	r2, [pc, #400]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800571e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005722:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800572a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800572e:	d10d      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f8bc 	bl	80058b4 <RCCEx_PLLSAI1_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005740:	7ffb      	ldrb	r3, [r7, #31]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d019      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	77bb      	strb	r3, [r7, #30]
 800574a:	e016      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005754:	d106      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005756:	4b56      	ldr	r3, [pc, #344]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4a55      	ldr	r2, [pc, #340]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800575c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005760:	60d3      	str	r3, [r2, #12]
 8005762:	e00a      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800576c:	d105      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800576e:	4b50      	ldr	r3, [pc, #320]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4a4f      	ldr	r2, [pc, #316]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005778:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d028      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005786:	4b4a      	ldr	r3, [pc, #296]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005794:	4946      	ldr	r1, [pc, #280]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a4:	d106      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a6:	4b42      	ldr	r3, [pc, #264]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	4a41      	ldr	r2, [pc, #260]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057b0:	60d3      	str	r3, [r2, #12]
 80057b2:	e011      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	2101      	movs	r1, #1
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 f875 	bl	80058b4 <RCCEx_PLLSAI1_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80057ce:	7ffb      	ldrb	r3, [r7, #31]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80057d4:	7ffb      	ldrb	r3, [r7, #31]
 80057d6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01e      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e4:	4b32      	ldr	r3, [pc, #200]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f4:	492e      	ldr	r1, [pc, #184]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005806:	d10c      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	2102      	movs	r1, #2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f850 	bl	80058b4 <RCCEx_PLLSAI1_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005818:	7ffb      	ldrb	r3, [r7, #31]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800581e:	7ffb      	ldrb	r3, [r7, #31]
 8005820:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800582e:	4b20      	ldr	r3, [pc, #128]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005834:	f023 0204 	bic.w	r2, r3, #4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583e:	491c      	ldr	r1, [pc, #112]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005852:	4b17      	ldr	r3, [pc, #92]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005854:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005858:	f023 0218 	bic.w	r2, r3, #24
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	4913      	ldr	r1, [pc, #76]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005876:	4b0e      	ldr	r3, [pc, #56]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005878:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800587c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005886:	490a      	ldr	r1, [pc, #40]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005898:	d105      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589a:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4a04      	ldr	r2, [pc, #16]	@ (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80058a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058a4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80058a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40021000 	.word	0x40021000

080058b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d018      	beq.n	80058fc <RCCEx_PLLSAI1_Config+0x48>
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d81f      	bhi.n	800590e <RCCEx_PLLSAI1_Config+0x5a>
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d002      	beq.n	80058d8 <RCCEx_PLLSAI1_Config+0x24>
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d009      	beq.n	80058ea <RCCEx_PLLSAI1_Config+0x36>
 80058d6:	e01a      	b.n	800590e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058d8:	4b65      	ldr	r3, [pc, #404]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d117      	bne.n	8005914 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e8:	e014      	b.n	8005914 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058ea:	4b61      	ldr	r3, [pc, #388]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d110      	bne.n	8005918 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fa:	e00d      	b.n	8005918 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80058fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590c:	e006      	b.n	800591c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
      break;
 8005912:	e004      	b.n	800591e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005914:	bf00      	nop
 8005916:	e002      	b.n	800591e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005918:	bf00      	nop
 800591a:	e000      	b.n	800591e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800591c:	bf00      	nop
  }

  if (status == HAL_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f040 809f 	bne.w	8005a64 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005926:	4b52      	ldr	r3, [pc, #328]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a51      	ldr	r2, [pc, #324]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 800592c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fd fcf7 	bl	8003324 <HAL_GetTick>
 8005936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005938:	e00f      	b.n	800595a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800593a:	f7fd fcf3 	bl	8003324 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d908      	bls.n	800595a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005948:	4b49      	ldr	r3, [pc, #292]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005958:	e006      	b.n	8005968 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800595a:	4b45      	ldr	r3, [pc, #276]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e9      	bne.n	800593a <RCCEx_PLLSAI1_Config+0x86>
 8005966:	e000      	b.n	800596a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005968:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d179      	bne.n	8005a64 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d116      	bne.n	80059a4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005976:	4b3e      	ldr	r3, [pc, #248]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a74 <RCCEx_PLLSAI1_Config+0x1c0>)
 800597c:	4013      	ands	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6892      	ldr	r2, [r2, #8]
 8005982:	0211      	lsls	r1, r2, #8
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68d2      	ldr	r2, [r2, #12]
 8005988:	06d2      	lsls	r2, r2, #27
 800598a:	4311      	orrs	r1, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6852      	ldr	r2, [r2, #4]
 8005990:	3a01      	subs	r2, #1
 8005992:	0112      	lsls	r2, r2, #4
 8005994:	4311      	orrs	r1, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	4934      	ldr	r1, [pc, #208]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	610b      	str	r3, [r1, #16]
 80059a2:	e033      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d118      	bne.n	80059dc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059aa:	4b31      	ldr	r3, [pc, #196]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	4b32      	ldr	r3, [pc, #200]	@ (8005a78 <RCCEx_PLLSAI1_Config+0x1c4>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6892      	ldr	r2, [r2, #8]
 80059b6:	0211      	lsls	r1, r2, #8
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6912      	ldr	r2, [r2, #16]
 80059bc:	0852      	lsrs	r2, r2, #1
 80059be:	3a01      	subs	r2, #1
 80059c0:	0552      	lsls	r2, r2, #21
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6852      	ldr	r2, [r2, #4]
 80059c8:	3a01      	subs	r2, #1
 80059ca:	0112      	lsls	r2, r2, #4
 80059cc:	4311      	orrs	r1, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	4926      	ldr	r1, [pc, #152]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	610b      	str	r3, [r1, #16]
 80059da:	e017      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059dc:	4b24      	ldr	r3, [pc, #144]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <RCCEx_PLLSAI1_Config+0x1c8>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6892      	ldr	r2, [r2, #8]
 80059e8:	0211      	lsls	r1, r2, #8
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6952      	ldr	r2, [r2, #20]
 80059ee:	0852      	lsrs	r2, r2, #1
 80059f0:	3a01      	subs	r2, #1
 80059f2:	0652      	lsls	r2, r2, #25
 80059f4:	4311      	orrs	r1, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6852      	ldr	r2, [r2, #4]
 80059fa:	3a01      	subs	r2, #1
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	4311      	orrs	r1, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	491a      	ldr	r1, [pc, #104]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a0c:	4b18      	ldr	r3, [pc, #96]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a17      	ldr	r2, [pc, #92]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fd fc84 	bl	8003324 <HAL_GetTick>
 8005a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a1e:	e00f      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a20:	f7fd fc80 	bl	8003324 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d908      	bls.n	8005a40 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a2e:	4b10      	ldr	r3, [pc, #64]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005a3e:	e006      	b.n	8005a4e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a40:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0e9      	beq.n	8005a20 <RCCEx_PLLSAI1_Config+0x16c>
 8005a4c:	e000      	b.n	8005a50 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8005a4e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005a56:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	4904      	ldr	r1, [pc, #16]	@ (8005a70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	07ff800c 	.word	0x07ff800c
 8005a78:	ff9f800c 	.word	0xff9f800c
 8005a7c:	f9ff800c 	.word	0xf9ff800c

08005a80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d018      	beq.n	8005ac8 <RCCEx_PLLSAI2_Config+0x48>
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d81f      	bhi.n	8005ada <RCCEx_PLLSAI2_Config+0x5a>
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d002      	beq.n	8005aa4 <RCCEx_PLLSAI2_Config+0x24>
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d009      	beq.n	8005ab6 <RCCEx_PLLSAI2_Config+0x36>
 8005aa2:	e01a      	b.n	8005ada <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d117      	bne.n	8005ae0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab4:	e014      	b.n	8005ae0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ab6:	4b46      	ldr	r3, [pc, #280]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d110      	bne.n	8005ae4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac6:	e00d      	b.n	8005ae4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005ac8:	4b41      	ldr	r3, [pc, #260]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad8:	e006      	b.n	8005ae8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ade:	e004      	b.n	8005aea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ae0:	bf00      	nop
 8005ae2:	e002      	b.n	8005aea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ae4:	bf00      	nop
 8005ae6:	e000      	b.n	8005aea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8005ae8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d169      	bne.n	8005bc4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005af0:	4b37      	ldr	r3, [pc, #220]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a36      	ldr	r2, [pc, #216]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fd fc12 	bl	8003324 <HAL_GetTick>
 8005b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b02:	e00f      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b04:	f7fd fc0e 	bl	8003324 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d908      	bls.n	8005b24 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b12:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b22:	e006      	b.n	8005b32 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b24:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e9      	bne.n	8005b04 <RCCEx_PLLSAI2_Config+0x84>
 8005b30:	e000      	b.n	8005b34 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005b32:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d144      	bne.n	8005bc4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d115      	bne.n	8005b6c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b40:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	4b23      	ldr	r3, [pc, #140]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x154>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6892      	ldr	r2, [r2, #8]
 8005b4c:	0211      	lsls	r1, r2, #8
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68d2      	ldr	r2, [r2, #12]
 8005b52:	06d2      	lsls	r2, r2, #27
 8005b54:	4311      	orrs	r1, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	0112      	lsls	r2, r2, #4
 8005b5e:	4311      	orrs	r1, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	491a      	ldr	r1, [pc, #104]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b6c:	4b18      	ldr	r3, [pc, #96]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a17      	ldr	r2, [pc, #92]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b78:	f7fd fbd4 	bl	8003324 <HAL_GetTick>
 8005b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b7e:	e00f      	b.n	8005ba0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b80:	f7fd fbd0 	bl	8003324 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d908      	bls.n	8005ba0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b8e:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8005b9e:	e006      	b.n	8005bae <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0e9      	beq.n	8005b80 <RCCEx_PLLSAI2_Config+0x100>
 8005bac:	e000      	b.n	8005bb0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8005bae:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	4904      	ldr	r1, [pc, #16]	@ (8005bd0 <RCCEx_PLLSAI2_Config+0x150>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	07ff800c 	.word	0x07ff800c

08005bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e042      	b.n	8005c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f83b 	bl	8005c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2224      	movs	r2, #36	@ 0x24
 8005c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb32 	bl	800628c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f82f 	bl	8005c8c <UART_SetConfig>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e01b      	b.n	8005c70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fbb1 	bl	80063d0 <UART_CheckIdleState>
 8005c6e:	4603      	mov	r3, r0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c90:	b08c      	sub	sp, #48	@ 0x30
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4baa      	ldr	r3, [pc, #680]	@ (8005f64 <UART_SetConfig+0x2d8>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a9f      	ldr	r2, [pc, #636]	@ (8005f68 <UART_SetConfig+0x2dc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	f023 010f 	bic.w	r1, r3, #15
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a90      	ldr	r2, [pc, #576]	@ (8005f6c <UART_SetConfig+0x2e0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d125      	bne.n	8005d7c <UART_SetConfig+0xf0>
 8005d30:	4b8f      	ldr	r3, [pc, #572]	@ (8005f70 <UART_SetConfig+0x2e4>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d81a      	bhi.n	8005d74 <UART_SetConfig+0xe8>
 8005d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <UART_SetConfig+0xb8>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d55 	.word	0x08005d55
 8005d48:	08005d65 	.word	0x08005d65
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5a:	e116      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d62:	e112      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005d64:	2304      	movs	r3, #4
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6a:	e10e      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d72:	e10a      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005d74:	2310      	movs	r3, #16
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7a:	e106      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a7c      	ldr	r2, [pc, #496]	@ (8005f74 <UART_SetConfig+0x2e8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d138      	bne.n	8005df8 <UART_SetConfig+0x16c>
 8005d86:	4b7a      	ldr	r3, [pc, #488]	@ (8005f70 <UART_SetConfig+0x2e4>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d82d      	bhi.n	8005df0 <UART_SetConfig+0x164>
 8005d94:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <UART_SetConfig+0x110>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dd1 	.word	0x08005dd1
 8005da0:	08005df1 	.word	0x08005df1
 8005da4:	08005df1 	.word	0x08005df1
 8005da8:	08005df1 	.word	0x08005df1
 8005dac:	08005de1 	.word	0x08005de1
 8005db0:	08005df1 	.word	0x08005df1
 8005db4:	08005df1 	.word	0x08005df1
 8005db8:	08005df1 	.word	0x08005df1
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005df1 	.word	0x08005df1
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd6:	e0d8      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dde:	e0d4      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de6:	e0d0      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dee:	e0cc      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df6:	e0c8      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8005f78 <UART_SetConfig+0x2ec>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d125      	bne.n	8005e4e <UART_SetConfig+0x1c2>
 8005e02:	4b5b      	ldr	r3, [pc, #364]	@ (8005f70 <UART_SetConfig+0x2e4>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e0c:	2b30      	cmp	r3, #48	@ 0x30
 8005e0e:	d016      	beq.n	8005e3e <UART_SetConfig+0x1b2>
 8005e10:	2b30      	cmp	r3, #48	@ 0x30
 8005e12:	d818      	bhi.n	8005e46 <UART_SetConfig+0x1ba>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d00a      	beq.n	8005e2e <UART_SetConfig+0x1a2>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d814      	bhi.n	8005e46 <UART_SetConfig+0x1ba>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <UART_SetConfig+0x19a>
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d008      	beq.n	8005e36 <UART_SetConfig+0x1aa>
 8005e24:	e00f      	b.n	8005e46 <UART_SetConfig+0x1ba>
 8005e26:	2300      	movs	r3, #0
 8005e28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e2c:	e0ad      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e34:	e0a9      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e36:	2304      	movs	r3, #4
 8005e38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e3c:	e0a5      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e44:	e0a1      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e46:	2310      	movs	r3, #16
 8005e48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e4c:	e09d      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a4a      	ldr	r2, [pc, #296]	@ (8005f7c <UART_SetConfig+0x2f0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d125      	bne.n	8005ea4 <UART_SetConfig+0x218>
 8005e58:	4b45      	ldr	r3, [pc, #276]	@ (8005f70 <UART_SetConfig+0x2e4>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e64:	d016      	beq.n	8005e94 <UART_SetConfig+0x208>
 8005e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e68:	d818      	bhi.n	8005e9c <UART_SetConfig+0x210>
 8005e6a:	2b80      	cmp	r3, #128	@ 0x80
 8005e6c:	d00a      	beq.n	8005e84 <UART_SetConfig+0x1f8>
 8005e6e:	2b80      	cmp	r3, #128	@ 0x80
 8005e70:	d814      	bhi.n	8005e9c <UART_SetConfig+0x210>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <UART_SetConfig+0x1f0>
 8005e76:	2b40      	cmp	r3, #64	@ 0x40
 8005e78:	d008      	beq.n	8005e8c <UART_SetConfig+0x200>
 8005e7a:	e00f      	b.n	8005e9c <UART_SetConfig+0x210>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e82:	e082      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e84:	2302      	movs	r3, #2
 8005e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8a:	e07e      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e92:	e07a      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e9a:	e076      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ea2:	e072      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a35      	ldr	r2, [pc, #212]	@ (8005f80 <UART_SetConfig+0x2f4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d12a      	bne.n	8005f04 <UART_SetConfig+0x278>
 8005eae:	4b30      	ldr	r3, [pc, #192]	@ (8005f70 <UART_SetConfig+0x2e4>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ebc:	d01a      	beq.n	8005ef4 <UART_SetConfig+0x268>
 8005ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec2:	d81b      	bhi.n	8005efc <UART_SetConfig+0x270>
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec8:	d00c      	beq.n	8005ee4 <UART_SetConfig+0x258>
 8005eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ece:	d815      	bhi.n	8005efc <UART_SetConfig+0x270>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <UART_SetConfig+0x250>
 8005ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed8:	d008      	beq.n	8005eec <UART_SetConfig+0x260>
 8005eda:	e00f      	b.n	8005efc <UART_SetConfig+0x270>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee2:	e052      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eea:	e04e      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005eec:	2304      	movs	r3, #4
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef2:	e04a      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005efa:	e046      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f02:	e042      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a17      	ldr	r2, [pc, #92]	@ (8005f68 <UART_SetConfig+0x2dc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d13a      	bne.n	8005f84 <UART_SetConfig+0x2f8>
 8005f0e:	4b18      	ldr	r3, [pc, #96]	@ (8005f70 <UART_SetConfig+0x2e4>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f1c:	d01a      	beq.n	8005f54 <UART_SetConfig+0x2c8>
 8005f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f22:	d81b      	bhi.n	8005f5c <UART_SetConfig+0x2d0>
 8005f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f28:	d00c      	beq.n	8005f44 <UART_SetConfig+0x2b8>
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f2e:	d815      	bhi.n	8005f5c <UART_SetConfig+0x2d0>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <UART_SetConfig+0x2b0>
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f38:	d008      	beq.n	8005f4c <UART_SetConfig+0x2c0>
 8005f3a:	e00f      	b.n	8005f5c <UART_SetConfig+0x2d0>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f42:	e022      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005f44:	2302      	movs	r3, #2
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4a:	e01e      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f52:	e01a      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f5a:	e016      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f62:	e012      	b.n	8005f8a <UART_SetConfig+0x2fe>
 8005f64:	cfff69f3 	.word	0xcfff69f3
 8005f68:	40008000 	.word	0x40008000
 8005f6c:	40013800 	.word	0x40013800
 8005f70:	40021000 	.word	0x40021000
 8005f74:	40004400 	.word	0x40004400
 8005f78:	40004800 	.word	0x40004800
 8005f7c:	40004c00 	.word	0x40004c00
 8005f80:	40005000 	.word	0x40005000
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4ab0      	ldr	r2, [pc, #704]	@ (8006250 <UART_SetConfig+0x5c4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	f040 809b 	bne.w	80060cc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d827      	bhi.n	8005fee <UART_SetConfig+0x362>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <UART_SetConfig+0x318>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	08005fef 	.word	0x08005fef
 8005fb4:	08005fdf 	.word	0x08005fdf
 8005fb8:	08005fef 	.word	0x08005fef
 8005fbc:	08005fef 	.word	0x08005fef
 8005fc0:	08005fef 	.word	0x08005fef
 8005fc4:	08005fe7 	.word	0x08005fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f7fe fff6 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8005fcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fce:	e014      	b.n	8005ffa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd0:	f7ff f806 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8005fd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fd6:	e010      	b.n	8005ffa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd8:	4b9e      	ldr	r3, [pc, #632]	@ (8006254 <UART_SetConfig+0x5c8>)
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fdc:	e00d      	b.n	8005ffa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fde:	f7fe ff39 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8005fe2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fe4:	e009      	b.n	8005ffa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fec:	e005      	b.n	8005ffa <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ff8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8130 	beq.w	8006262 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	4a94      	ldr	r2, [pc, #592]	@ (8006258 <UART_SetConfig+0x5cc>)
 8006008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600c:	461a      	mov	r2, r3
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	fbb3 f3f2 	udiv	r3, r3, r2
 8006014:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d305      	bcc.n	8006032 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	429a      	cmp	r2, r3
 8006030:	d903      	bls.n	800603a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006038:	e113      	b.n	8006262 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	2200      	movs	r2, #0
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	60fa      	str	r2, [r7, #12]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006046:	4a84      	ldr	r2, [pc, #528]	@ (8006258 <UART_SetConfig+0x5cc>)
 8006048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800604c:	b29b      	uxth	r3, r3
 800604e:	2200      	movs	r2, #0
 8006050:	603b      	str	r3, [r7, #0]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800605c:	f7fa f8ea 	bl	8000234 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	020b      	lsls	r3, r1, #8
 8006072:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006076:	0202      	lsls	r2, r0, #8
 8006078:	6979      	ldr	r1, [r7, #20]
 800607a:	6849      	ldr	r1, [r1, #4]
 800607c:	0849      	lsrs	r1, r1, #1
 800607e:	2000      	movs	r0, #0
 8006080:	460c      	mov	r4, r1
 8006082:	4605      	mov	r5, r0
 8006084:	eb12 0804 	adds.w	r8, r2, r4
 8006088:	eb43 0905 	adc.w	r9, r3, r5
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	469a      	mov	sl, r3
 8006094:	4693      	mov	fp, r2
 8006096:	4652      	mov	r2, sl
 8006098:	465b      	mov	r3, fp
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	f7fa f8c9 	bl	8000234 <__aeabi_uldivmod>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4613      	mov	r3, r2
 80060a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060b0:	d308      	bcc.n	80060c4 <UART_SetConfig+0x438>
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060b8:	d204      	bcs.n	80060c4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a3a      	ldr	r2, [r7, #32]
 80060c0:	60da      	str	r2, [r3, #12]
 80060c2:	e0ce      	b.n	8006262 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060ca:	e0ca      	b.n	8006262 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d4:	d166      	bne.n	80061a4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80060d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d827      	bhi.n	800612e <UART_SetConfig+0x4a2>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x458>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006119 	.word	0x08006119
 80060f0:	0800612f 	.word	0x0800612f
 80060f4:	0800611f 	.word	0x0800611f
 80060f8:	0800612f 	.word	0x0800612f
 80060fc:	0800612f 	.word	0x0800612f
 8006100:	0800612f 	.word	0x0800612f
 8006104:	08006127 	.word	0x08006127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006108:	f7fe ff56 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 800610c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800610e:	e014      	b.n	800613a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fe ff66 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006116:	e010      	b.n	800613a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006118:	4b4e      	ldr	r3, [pc, #312]	@ (8006254 <UART_SetConfig+0x5c8>)
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800611c:	e00d      	b.n	800613a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611e:	f7fe fe99 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 8006122:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006124:	e009      	b.n	800613a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800612c:	e005      	b.n	800613a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8090 	beq.w	8006262 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	4a44      	ldr	r2, [pc, #272]	@ (8006258 <UART_SetConfig+0x5cc>)
 8006148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614c:	461a      	mov	r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	fbb3 f3f2 	udiv	r3, r3, r2
 8006154:	005a      	lsls	r2, r3, #1
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	441a      	add	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	fbb2 f3f3 	udiv	r3, r2, r3
 8006166:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	d916      	bls.n	800619c <UART_SetConfig+0x510>
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006174:	d212      	bcs.n	800619c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	b29b      	uxth	r3, r3
 800617a:	f023 030f 	bic.w	r3, r3, #15
 800617e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	b29a      	uxth	r2, r3
 800618c:	8bfb      	ldrh	r3, [r7, #30]
 800618e:	4313      	orrs	r3, r2
 8006190:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	8bfa      	ldrh	r2, [r7, #30]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	e062      	b.n	8006262 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061a2:	e05e      	b.n	8006262 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d828      	bhi.n	80061fe <UART_SetConfig+0x572>
 80061ac:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <UART_SetConfig+0x528>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	080061ff 	.word	0x080061ff
 80061c4:	080061ef 	.word	0x080061ef
 80061c8:	080061ff 	.word	0x080061ff
 80061cc:	080061ff 	.word	0x080061ff
 80061d0:	080061ff 	.word	0x080061ff
 80061d4:	080061f7 	.word	0x080061f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d8:	f7fe feee 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 80061dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061de:	e014      	b.n	800620a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e0:	f7fe fefe 	bl	8004fe0 <HAL_RCC_GetPCLK2Freq>
 80061e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061e6:	e010      	b.n	800620a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006254 <UART_SetConfig+0x5c8>)
 80061ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061ec:	e00d      	b.n	800620a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ee:	f7fe fe31 	bl	8004e54 <HAL_RCC_GetSysClockFreq>
 80061f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061f4:	e009      	b.n	800620a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061fc:	e005      	b.n	800620a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006208:	bf00      	nop
    }

    if (pclk != 0U)
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d028      	beq.n	8006262 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	4a10      	ldr	r2, [pc, #64]	@ (8006258 <UART_SetConfig+0x5cc>)
 8006216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800621a:	461a      	mov	r2, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	441a      	add	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d910      	bls.n	800625c <UART_SetConfig+0x5d0>
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006240:	d20c      	bcs.n	800625c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	b29a      	uxth	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	e009      	b.n	8006262 <UART_SetConfig+0x5d6>
 800624e:	bf00      	nop
 8006250:	40008000 	.word	0x40008000
 8006254:	00f42400 	.word	0x00f42400
 8006258:	08006810 	.word	0x08006810
      }
      else
      {
        ret = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2201      	movs	r2, #1
 8006266:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2201      	movs	r2, #1
 800626e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800627e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006282:	4618      	mov	r0, r3
 8006284:	3730      	adds	r7, #48	@ 0x30
 8006286:	46bd      	mov	sp, r7
 8006288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800628c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638a:	d10a      	bne.n	80063a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b098      	sub	sp, #96	@ 0x60
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e0:	f7fc ffa0 	bl	8003324 <HAL_GetTick>
 80063e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d12f      	bne.n	8006454 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f88e 	bl	8006524 <UART_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d022      	beq.n	8006454 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800641c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006422:	653b      	str	r3, [r7, #80]	@ 0x50
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800642c:	647b      	str	r3, [r7, #68]	@ 0x44
 800642e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800643a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e063      	b.n	800651c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b04      	cmp	r3, #4
 8006460:	d149      	bne.n	80064f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006462:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646a:	2200      	movs	r2, #0
 800646c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f857 	bl	8006524 <UART_WaitOnFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d03c      	beq.n	80064f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	623b      	str	r3, [r7, #32]
   return(result);
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649a:	633b      	str	r3, [r7, #48]	@ 0x30
 800649c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e6      	bne.n	800647c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3308      	adds	r3, #8
 80064cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ce:	61fa      	str	r2, [r7, #28]
 80064d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	617b      	str	r3, [r7, #20]
   return(result);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e012      	b.n	800651c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3758      	adds	r7, #88	@ 0x58
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	e04f      	b.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d04b      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653e:	f7fc fef1 	bl	8003324 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	429a      	cmp	r2, r3
 800654c:	d302      	bcc.n	8006554 <UART_WaitOnFlagUntilTimeout+0x30>
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e04e      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d037      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b80      	cmp	r3, #128	@ 0x80
 800656a:	d034      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b40      	cmp	r3, #64	@ 0x40
 8006570:	d031      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b08      	cmp	r3, #8
 800657e:	d110      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2208      	movs	r2, #8
 8006586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f838 	bl	80065fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2208      	movs	r2, #8
 8006592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e029      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b0:	d111      	bne.n	80065d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f81e 	bl	80065fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e00f      	b.n	80065f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4013      	ands	r3, r2
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d0a0      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065fe:	b480      	push	{r7}
 8006600:	b095      	sub	sp, #84	@ 0x54
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800661a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006624:	643b      	str	r3, [r7, #64]	@ 0x40
 8006626:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800662a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	61fb      	str	r3, [r7, #28]
   return(result);
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800665c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800665e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e3      	bne.n	8006638 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d118      	bne.n	80066aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	60bb      	str	r3, [r7, #8]
   return(result);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 0310 	bic.w	r3, r3, #16
 800668c:	647b      	str	r3, [r7, #68]	@ 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6979      	ldr	r1, [r7, #20]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	613b      	str	r3, [r7, #16]
   return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e6      	bne.n	8006678 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066be:	bf00      	nop
 80066c0:	3754      	adds	r7, #84	@ 0x54
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <memcmp>:
 80066ca:	3901      	subs	r1, #1
 80066cc:	4402      	add	r2, r0
 80066ce:	b510      	push	{r4, lr}
 80066d0:	4290      	cmp	r0, r2
 80066d2:	d101      	bne.n	80066d8 <memcmp+0xe>
 80066d4:	2000      	movs	r0, #0
 80066d6:	e005      	b.n	80066e4 <memcmp+0x1a>
 80066d8:	7803      	ldrb	r3, [r0, #0]
 80066da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066de:	42a3      	cmp	r3, r4
 80066e0:	d001      	beq.n	80066e6 <memcmp+0x1c>
 80066e2:	1b18      	subs	r0, r3, r4
 80066e4:	bd10      	pop	{r4, pc}
 80066e6:	3001      	adds	r0, #1
 80066e8:	e7f2      	b.n	80066d0 <memcmp+0x6>

080066ea <memset>:
 80066ea:	4402      	add	r2, r0
 80066ec:	4603      	mov	r3, r0
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d100      	bne.n	80066f4 <memset+0xa>
 80066f2:	4770      	bx	lr
 80066f4:	f803 1b01 	strb.w	r1, [r3], #1
 80066f8:	e7f9      	b.n	80066ee <memset+0x4>
	...

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006734 <__libc_init_array+0x38>)
 8006700:	2600      	movs	r6, #0
 8006702:	4c0d      	ldr	r4, [pc, #52]	@ (8006738 <__libc_init_array+0x3c>)
 8006704:	1b64      	subs	r4, r4, r5
 8006706:	10a4      	asrs	r4, r4, #2
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	@ (800673c <__libc_init_array+0x40>)
 800670e:	2600      	movs	r6, #0
 8006710:	4c0b      	ldr	r4, [pc, #44]	@ (8006740 <__libc_init_array+0x44>)
 8006712:	f000 f825 	bl	8006760 <_init>
 8006716:	1b64      	subs	r4, r4, r5
 8006718:	10a4      	asrs	r4, r4, #2
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	3601      	adds	r6, #1
 8006726:	4798      	blx	r3
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	3601      	adds	r6, #1
 8006730:	4798      	blx	r3
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	08006830 	.word	0x08006830
 8006738:	08006830 	.word	0x08006830
 800673c:	08006830 	.word	0x08006830
 8006740:	08006834 	.word	0x08006834

08006744 <memcpy>:
 8006744:	440a      	add	r2, r1
 8006746:	1e43      	subs	r3, r0, #1
 8006748:	4291      	cmp	r1, r2
 800674a:	d100      	bne.n	800674e <memcpy+0xa>
 800674c:	4770      	bx	lr
 800674e:	b510      	push	{r4, lr}
 8006750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006754:	4291      	cmp	r1, r2
 8006756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675a:	d1f9      	bne.n	8006750 <memcpy+0xc>
 800675c:	bd10      	pop	{r4, pc}
	...

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
